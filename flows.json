[
    {
        "id": "3d6c52b09293e59e",
        "type": "tab",
        "label": "LCM_2_Bombas",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "f6c808877e7ef41b",
        "type": "mqtt in",
        "z": "3d6c52b09293e59e",
        "name": "",
        "topic": "lcm/PLC/Alarma_guardamotor_Motor1",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "6aebf5a95ad76cc9",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 240,
        "y": 771,
        "wires": [
            [
                "0132f556461927fe"
            ]
        ]
    },
    {
        "id": "66186cb3fd7d0b2b",
        "type": "mqtt in",
        "z": "3d6c52b09293e59e",
        "name": "",
        "topic": "lcm/PLC/Alarma_guardamotor_Motor2",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "6aebf5a95ad76cc9",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 240,
        "y": 871,
        "wires": [
            [
                "11112e8d90e71517"
            ]
        ]
    },
    {
        "id": "73fb9fab36f59522",
        "type": "mqtt in",
        "z": "3d6c52b09293e59e",
        "name": "",
        "topic": "lcm/PLC/Alarma_Manten_Correct_B1",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "6aebf5a95ad76cc9",
        "nl": false,
        "rap": false,
        "rh": 0,
        "inputs": 0,
        "x": 240,
        "y": 971,
        "wires": [
            [
                "c54838f0c0480eee"
            ]
        ]
    },
    {
        "id": "4d001d71400474bd",
        "type": "mqtt in",
        "z": "3d6c52b09293e59e",
        "name": "",
        "topic": "lcm/PLC/Alarma_Manten_Correct_B2",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "6aebf5a95ad76cc9",
        "nl": false,
        "rap": false,
        "rh": 0,
        "inputs": 0,
        "x": 240,
        "y": 1051,
        "wires": [
            [
                "e967fb3fd0916641"
            ]
        ]
    },
    {
        "id": "3965910fc3c84a73",
        "type": "mqtt in",
        "z": "3d6c52b09293e59e",
        "name": "",
        "topic": "lcm/PLC/Alarma_Manten_Prev_B1",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "6aebf5a95ad76cc9",
        "nl": false,
        "rap": false,
        "rh": 0,
        "inputs": 0,
        "x": 230,
        "y": 1151,
        "wires": [
            [
                "6133e5748488c7b1"
            ]
        ]
    },
    {
        "id": "b4d10f36e3c859c8",
        "type": "mqtt in",
        "z": "3d6c52b09293e59e",
        "name": "",
        "topic": "lcm/PLC/Alarma_Manten_Prev_B2",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "6aebf5a95ad76cc9",
        "nl": false,
        "rap": false,
        "rh": 0,
        "inputs": 0,
        "x": 230,
        "y": 1211,
        "wires": [
            [
                "5468ddb31335a258"
            ]
        ]
    },
    {
        "id": "baef2f3814f1c9d9",
        "type": "debug",
        "z": "3d6c52b09293e59e",
        "name": "debug 13",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 850,
        "y": 1211,
        "wires": []
    },
    {
        "id": "6133e5748488c7b1",
        "type": "function",
        "z": "3d6c52b09293e59e",
        "name": "function 17",
        "func": "var mqtt_tag = msg.payload[\"tag\"].split(\"/\");\nglobal.set(mqtt_tag[1],msg.payload[\"v\"]);\nvar datosJson = global.get(\"datosJsonB1\");\nif(datosJson === undefined){\n    datosJson = {}; \n}\n\ndatosJson[mqtt_tag[1].slice(0,-1)] = msg.payload[\"v\"];\nglobal.set(\"datosJsonB1\",datosJson);\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 600,
        "y": 1151,
        "wires": [
            [
                "beeabe7cbf889ba6"
            ]
        ]
    },
    {
        "id": "5468ddb31335a258",
        "type": "function",
        "z": "3d6c52b09293e59e",
        "name": "function 18",
        "func": "var mqtt_tag = msg.payload['tag'].split(\"/\");\nglobal.set(mqtt_tag[1],msg.payload[\"v\"]);\nvar datosJson = global.get(\"datosJsonB2\");\nif(datosJson === undefined){\n    datosJson = {}; \n}\n\ndatosJson[mqtt_tag[1].slice(0,-1)] = msg.payload[\"v\"];\nglobal.set(\"datosJsonB2\",datosJson);\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 600,
        "y": 1211,
        "wires": [
            [
                "baef2f3814f1c9d9"
            ]
        ]
    },
    {
        "id": "0132f556461927fe",
        "type": "function",
        "z": "3d6c52b09293e59e",
        "name": "function 13",
        "func": "var mqtt_tag = msg.payload[\"tag\"].split(\"/\");\nglobal.set(mqtt_tag[1],msg.payload[\"v\"]);\nvar datosJson = global.get(\"datosJsonB1\");\nif(datosJson === undefined){\n    datosJson = {}; \n}\n\ndatosJson[mqtt_tag[1].slice(0,-1)] = msg.payload[\"v\"];\nglobal.set(\"datosJsonB1\",datosJson);\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 600,
        "y": 771,
        "wires": [
            [
                "caf1e9fb49347b6a"
            ]
        ]
    },
    {
        "id": "11112e8d90e71517",
        "type": "function",
        "z": "3d6c52b09293e59e",
        "name": "function 14",
        "func": "var mqtt_tag = msg.payload[\"tag\"].split(\"/\");\nglobal.set(mqtt_tag[1],msg.payload[\"v\"]);\nvar datosJson = global.get(\"datosJsonB2\");\nif(datosJson === undefined){\n    datosJson = {}; \n}\n\ndatosJson[mqtt_tag[1].slice(0,-1)] = msg.payload[\"v\"];\nglobal.set(\"datosJsonB2\",datosJson);\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 600,
        "y": 871,
        "wires": [
            [
                "a4d44e0006daa809"
            ]
        ]
    },
    {
        "id": "c54838f0c0480eee",
        "type": "function",
        "z": "3d6c52b09293e59e",
        "name": "function 15",
        "func": "var mqtt_tag = msg.payload[\"tag\"].split(\"/\");\nglobal.set(mqtt_tag[1],msg.payload[\"v\"]);\nvar datosJson = global.get(\"datosJsonB1\");\nif(datosJson === undefined){\n    datosJson = {}; \n}\n\ndatosJson[mqtt_tag[1].slice(0, -1)] = msg.payload[\"v\"];\nglobal.set(\"datosJsonB1\",datosJson);\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 600,
        "y": 971,
        "wires": [
            [
                "1ce597675f0c62f6"
            ]
        ]
    },
    {
        "id": "e967fb3fd0916641",
        "type": "function",
        "z": "3d6c52b09293e59e",
        "name": "function 16",
        "func": "var mqtt_tag = msg.payload[\"tag\"].split(\"/\");\nglobal.set(mqtt_tag[1],msg.payload[\"v\"]);\nvar datosJson = global.get(\"datosJsonB2\");\nif(datosJson === undefined){\n    datosJson = {}; \n}\n\ndatosJson[mqtt_tag[1].slice(0,-1)] = msg.payload[\"v\"];\nglobal.set(\"datosJsonB2\",datosJson);\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 600,
        "y": 1051,
        "wires": [
            [
                "42f3520701b3af77"
            ]
        ]
    },
    {
        "id": "caf1e9fb49347b6a",
        "type": "debug",
        "z": "3d6c52b09293e59e",
        "name": "debug 8",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 850,
        "y": 771,
        "wires": []
    },
    {
        "id": "a4d44e0006daa809",
        "type": "debug",
        "z": "3d6c52b09293e59e",
        "name": "debug 9",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 850,
        "y": 871,
        "wires": []
    },
    {
        "id": "1ce597675f0c62f6",
        "type": "debug",
        "z": "3d6c52b09293e59e",
        "name": "debug 10",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 850,
        "y": 971,
        "wires": []
    },
    {
        "id": "42f3520701b3af77",
        "type": "debug",
        "z": "3d6c52b09293e59e",
        "name": "debug 11",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 850,
        "y": 1051,
        "wires": []
    },
    {
        "id": "beeabe7cbf889ba6",
        "type": "debug",
        "z": "3d6c52b09293e59e",
        "name": "debug 12",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 850,
        "y": 1151,
        "wires": []
    },
    {
        "id": "85982953f10eca6b",
        "type": "mqtt in",
        "z": "3d6c52b09293e59e",
        "name": "",
        "topic": "lcm/PLC/Alarma_refuerzo_mucho_tiempo",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "6aebf5a95ad76cc9",
        "nl": false,
        "rap": false,
        "rh": 0,
        "inputs": 0,
        "x": 250,
        "y": 1291,
        "wires": [
            [
                "637ba91ea87a1aee"
            ]
        ]
    },
    {
        "id": "9079b3185ac84eb0",
        "type": "debug",
        "z": "3d6c52b09293e59e",
        "name": "debug 14",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 850,
        "y": 1291,
        "wires": []
    },
    {
        "id": "a7ac2b2d9a6c23fb",
        "type": "mqtt in",
        "z": "3d6c52b09293e59e",
        "name": "",
        "topic": "lcm/PLC/Alarma_Tiempo_Sin_Refuerzo_Excedido",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "6aebf5a95ad76cc9",
        "nl": false,
        "rap": false,
        "rh": 0,
        "inputs": 0,
        "x": 280,
        "y": 1351,
        "wires": [
            [
                "868f4dae17c97609"
            ]
        ]
    },
    {
        "id": "c7a8aaecb736e17a",
        "type": "debug",
        "z": "3d6c52b09293e59e",
        "name": "debug 15",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 850,
        "y": 1351,
        "wires": []
    },
    {
        "id": "baff7c25e4082840",
        "type": "mqtt in",
        "z": "3d6c52b09293e59e",
        "name": "",
        "topic": "lcm/PLC/Alternar_Motor_Manual",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "6aebf5a95ad76cc9",
        "nl": false,
        "rap": false,
        "rh": 0,
        "inputs": 0,
        "x": 220,
        "y": 1431,
        "wires": [
            [
                "6af487de3efb9875"
            ]
        ]
    },
    {
        "id": "89f742179eb5e986",
        "type": "debug",
        "z": "3d6c52b09293e59e",
        "name": "debug 16",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 850,
        "y": 1431,
        "wires": []
    },
    {
        "id": "33c8357125a344bc",
        "type": "mqtt in",
        "z": "3d6c52b09293e59e",
        "name": "",
        "topic": "lcm/PLC/Alternar_Motores_Automaticamente",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "6aebf5a95ad76cc9",
        "nl": false,
        "rap": false,
        "rh": 0,
        "inputs": 0,
        "x": 260,
        "y": 1491,
        "wires": [
            [
                "ce259b694e9a85df"
            ]
        ]
    },
    {
        "id": "80cd27cf48599eb5",
        "type": "debug",
        "z": "3d6c52b09293e59e",
        "name": "debug 17",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 850,
        "y": 1491,
        "wires": []
    },
    {
        "id": "ce259b694e9a85df",
        "type": "function",
        "z": "3d6c52b09293e59e",
        "name": "function 22",
        "func": "var mqtt_tag = msg.payload[\"tag\"].split(\"/\");\nvar datosJson = global.get(\"datosJson\");\nif(datosJson === undefined){\n    datosJson = {}; \n}\n\ndatosJson[mqtt_tag[1]] = msg.payload[\"v\"];\nglobal.set(\"datosJson\",datosJson);\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 600,
        "y": 1491,
        "wires": [
            [
                "80cd27cf48599eb5"
            ]
        ]
    },
    {
        "id": "6a3ee95d7eb318a8",
        "type": "mqtt in",
        "z": "3d6c52b09293e59e",
        "name": "",
        "topic": "lcm/PLC/Confirmacion_Marcha_Motor1",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "6aebf5a95ad76cc9",
        "nl": false,
        "rap": false,
        "rh": 0,
        "inputs": 0,
        "x": 240,
        "y": 1611,
        "wires": [
            [
                "e0bfe6ed055e456e"
            ]
        ]
    },
    {
        "id": "e0bfe6ed055e456e",
        "type": "function",
        "z": "3d6c52b09293e59e",
        "name": "function 23",
        "func": "var mqtt_tag = msg.payload[\"tag\"].split(\"/\");\nvar datosJson = global.get(\"datosJsonB1\");\nif(datosJson === undefined){\n    datosJson = {}; \n}\n\ndatosJson[mqtt_tag[1].slice(0,-1)] = msg.payload[\"v\"];\nglobal.set(\"datosJsonB1\",datosJson);\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 600,
        "y": 1611,
        "wires": [
            [
                "69ba7574ed524ca0"
            ]
        ]
    },
    {
        "id": "69ba7574ed524ca0",
        "type": "debug",
        "z": "3d6c52b09293e59e",
        "name": "debug 18",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 850,
        "y": 1611,
        "wires": []
    },
    {
        "id": "55fc921e39b727a3",
        "type": "mqtt in",
        "z": "3d6c52b09293e59e",
        "name": "",
        "topic": "lcm/PLC/Confirmacion_Marcha_Motor2",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "6aebf5a95ad76cc9",
        "nl": false,
        "rap": false,
        "rh": 0,
        "inputs": 0,
        "x": 240,
        "y": 1671,
        "wires": [
            [
                "4a90c7ab2250aa2a"
            ]
        ]
    },
    {
        "id": "4a90c7ab2250aa2a",
        "type": "function",
        "z": "3d6c52b09293e59e",
        "name": "function 24",
        "func": "var mqtt_tag = msg.payload[\"tag\"].split(\"/\");\nvar datosJson = global.get(\"datosJsonB2\");\nif(datosJson === undefined){\n    datosJson = {}; \n}\n\ndatosJson[mqtt_tag[1].slice(0,-1)] = msg.payload[\"v\"];\nglobal.set(\"datosJsonB2\",datosJson);\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 600,
        "y": 1671,
        "wires": [
            [
                "6f6b8929d565b6c4"
            ]
        ]
    },
    {
        "id": "6f6b8929d565b6c4",
        "type": "debug",
        "z": "3d6c52b09293e59e",
        "name": "debug 19",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 850,
        "y": 1671,
        "wires": []
    },
    {
        "id": "27aa1a8f0954dd90",
        "type": "mqtt in",
        "z": "3d6c52b09293e59e",
        "name": "",
        "topic": "lcm/PLC/Entrada_Falla_Motor1",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "6aebf5a95ad76cc9",
        "nl": false,
        "rap": false,
        "rh": 0,
        "inputs": 0,
        "x": 220,
        "y": 1731,
        "wires": [
            [
                "20b2fa9c89488fd4"
            ]
        ]
    },
    {
        "id": "20b2fa9c89488fd4",
        "type": "function",
        "z": "3d6c52b09293e59e",
        "name": "function 25",
        "func": "var mqtt_tag = msg.payload[\"tag\"].split(\"/\");\nglobal.set(mqtt_tag[1],msg.payload[\"v\"]);\nvar datosJson = global.get(\"datosJsonB1\");\nif(datosJson === undefined){\n    datosJson = {}; \n}\n\ndatosJson[mqtt_tag[1].slice(0,-1)] = msg.payload[\"v\"];\nglobal.set(\"datosJsonB1\",datosJson);\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 600,
        "y": 1731,
        "wires": [
            [
                "2836e2683bd8ceaf"
            ]
        ]
    },
    {
        "id": "2836e2683bd8ceaf",
        "type": "debug",
        "z": "3d6c52b09293e59e",
        "name": "debug 20",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 850,
        "y": 1731,
        "wires": []
    },
    {
        "id": "2582862b627bab39",
        "type": "function",
        "z": "3d6c52b09293e59e",
        "name": "function 26",
        "func": "var mqtt_tag = msg.payload[\"tag\"].split(\"/\");\nglobal.set(mqtt_tag[1],msg.payload[\"v\"]);\nvar datosJson = global.get(\"datosJsonB2\");\nif(datosJson === undefined){\n    datosJson = {};\n}\n\ndatosJson[mqtt_tag[1].slice(0,-1)] = msg.payload[\"v\"];\nglobal.set(\"datosJsonB2\",datosJson);\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 600,
        "y": 1791,
        "wires": [
            [
                "8a25515bf27dd36e"
            ]
        ]
    },
    {
        "id": "8a25515bf27dd36e",
        "type": "debug",
        "z": "3d6c52b09293e59e",
        "name": "debug 21",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 850,
        "y": 1791,
        "wires": []
    },
    {
        "id": "c46eb38f17bc633c",
        "type": "mqtt in",
        "z": "3d6c52b09293e59e",
        "name": "",
        "topic": "lcm/PLC/Entrada_Vacuostato",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "6aebf5a95ad76cc9",
        "nl": false,
        "rap": false,
        "rh": 0,
        "inputs": 0,
        "x": 210,
        "y": 1871,
        "wires": [
            [
                "f78af2e6de74c3f8"
            ]
        ]
    },
    {
        "id": "f78af2e6de74c3f8",
        "type": "function",
        "z": "3d6c52b09293e59e",
        "name": "function 27",
        "func": "var mqtt_tag = msg.payload[\"tag\"].split(\"/\");\nglobal.set(mqtt_tag[1],msg.payload[\"v\"]);\nvar datosJson = global.get(\"datosJson\");\nif(datosJson === undefined){\n    datosJson = {}; \n}\n\ndatosJson[mqtt_tag[1]] = msg.payload[\"v\"];\nglobal.set(\"datosJson\",datosJson);\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 600,
        "y": 1871,
        "wires": [
            [
                "6e04bdf765385c9c"
            ]
        ]
    },
    {
        "id": "6e04bdf765385c9c",
        "type": "debug",
        "z": "3d6c52b09293e59e",
        "name": "debug 22",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 850,
        "y": 1871,
        "wires": []
    },
    {
        "id": "081f39cdc95d4865",
        "type": "mqtt in",
        "z": "3d6c52b09293e59e",
        "name": "",
        "topic": "lcm/PLC/Horas_de_Marcha_Motor1",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "6aebf5a95ad76cc9",
        "nl": false,
        "rap": false,
        "rh": 0,
        "inputs": 0,
        "x": 230,
        "y": 1931,
        "wires": [
            [
                "d889a01e9a7d5755"
            ]
        ]
    },
    {
        "id": "d889a01e9a7d5755",
        "type": "function",
        "z": "3d6c52b09293e59e",
        "name": "function 28",
        "func": "var mqtt_tag = msg.payload[\"tag\"].split(\"/\");\nvar datosJson = global.get(\"datosJsonB1\");\nif(datosJson === undefined){\n    datosJson = {}; \n}\n\ndatosJson[mqtt_tag[1].slice(0,-1)] = msg.payload[\"v\"];\nglobal.set(\"datosJsonB1\",datosJson);\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 600,
        "y": 1931,
        "wires": [
            [
                "c616c57b2022cc6a"
            ]
        ]
    },
    {
        "id": "c616c57b2022cc6a",
        "type": "debug",
        "z": "3d6c52b09293e59e",
        "name": "debug 23",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 850,
        "y": 1931,
        "wires": []
    },
    {
        "id": "d65c9186be2ca035",
        "type": "mqtt in",
        "z": "3d6c52b09293e59e",
        "name": "",
        "topic": "lcm/PLC/Horas_de_Marcha_Motor2",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "6aebf5a95ad76cc9",
        "nl": false,
        "rap": false,
        "rh": 0,
        "inputs": 0,
        "x": 230,
        "y": 1991,
        "wires": [
            [
                "56f76829f9bdbf82"
            ]
        ]
    },
    {
        "id": "56f76829f9bdbf82",
        "type": "function",
        "z": "3d6c52b09293e59e",
        "name": "function 29",
        "func": "var mqtt_tag = msg.payload[\"tag\"].split(\"/\");\nvar datosJson = global.get(\"datosJsonB2\");\nif (datosJson === undefined) {\n    datosJson = {};\n}\n\ndatosJson[mqtt_tag[1].slice(0, -1)] = msg.payload[\"v\"];\nglobal.set(\"datosJsonB\", datosJson);\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 600,
        "y": 1991,
        "wires": [
            [
                "a9175475bac0e4ed"
            ]
        ]
    },
    {
        "id": "a9175475bac0e4ed",
        "type": "debug",
        "z": "3d6c52b09293e59e",
        "name": "debug 24",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 850,
        "y": 1991,
        "wires": []
    },
    {
        "id": "97e6b99493c8cb25",
        "type": "mqtt in",
        "z": "3d6c52b09293e59e",
        "name": "",
        "topic": "lcm/PLC/Manual_Automatico",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "6aebf5a95ad76cc9",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 210,
        "y": 1551,
        "wires": [
            [
                "f64357ebb2c577a6"
            ]
        ]
    },
    {
        "id": "f64357ebb2c577a6",
        "type": "function",
        "z": "3d6c52b09293e59e",
        "name": "function 30",
        "func": "var mqtt_tag = msg.payload[\"tag\"].split(\"/\");\nvar datosJson = global.get(\"datosJson\");\nif(datosJson === undefined){\n    datosJson = {}; \n}\n\ndatosJson[mqtt_tag[1]] = msg.payload[\"v\"];\nglobal.set(\"datosJson\",datosJson);\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 600,
        "y": 1551,
        "wires": [
            [
                "59c580c3ba62539c"
            ]
        ]
    },
    {
        "id": "59c580c3ba62539c",
        "type": "debug",
        "z": "3d6c52b09293e59e",
        "name": "debug 25",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 850,
        "y": 1551,
        "wires": []
    },
    {
        "id": "25d3ec108f6622c9",
        "type": "function",
        "z": "3d6c52b09293e59e",
        "name": "function 12",
        "func": "msg.payload = global.get(\"datosJson\") || {};\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 810,
        "y": 2100,
        "wires": [
            [
                "06a8f691ce079baa",
                "ba191d2e2bf28a61"
            ]
        ]
    },
    {
        "id": "41e60a03ccb50e4d",
        "type": "http in",
        "z": "3d6c52b09293e59e",
        "name": "",
        "url": "/lcm/get_datos_sistema",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 180,
        "y": 2100,
        "wires": [
            [
                "e080b8cdb1b44c9d"
            ]
        ]
    },
    {
        "id": "06a8f691ce079baa",
        "type": "http response",
        "z": "3d6c52b09293e59e",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 1010,
        "y": 2100,
        "wires": []
    },
    {
        "id": "ba191d2e2bf28a61",
        "type": "debug",
        "z": "3d6c52b09293e59e",
        "name": "debug 7",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1040,
        "y": 2180,
        "wires": []
    },
    {
        "id": "637ba91ea87a1aee",
        "type": "function",
        "z": "3d6c52b09293e59e",
        "name": "function 19",
        "func": "var mqtt_tag = msg.payload[\"tag\"].split(\"/\");\nglobal.set(mqtt_tag[1],msg.payload[\"v\"]);\nvar datosJson = global.get(\"datosJson\");\nif(datosJson === undefined){\n    datosJson = {}; \n}\n\ndatosJson[mqtt_tag[1]] = msg.payload[\"v\"];\nglobal.set(\"datosJson\",datosJson);\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 600,
        "y": 1291,
        "wires": [
            [
                "9079b3185ac84eb0"
            ]
        ]
    },
    {
        "id": "868f4dae17c97609",
        "type": "function",
        "z": "3d6c52b09293e59e",
        "name": "function 20",
        "func": "var mqtt_tag = msg.payload[\"tag\"].split(\"/\");\nglobal.set(mqtt_tag[1],msg.payload[\"v\"]);\nvar datosJson = global.get(\"datosJson\");\nif(datosJson === undefined){\n    datosJson = {}; \n}\n\ndatosJson[mqtt_tag[1]] = msg.payload[\"v\"];\nglobal.set(\"datosJson\",datosJson);\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 600,
        "y": 1351,
        "wires": [
            [
                "c7a8aaecb736e17a"
            ]
        ]
    },
    {
        "id": "6af487de3efb9875",
        "type": "function",
        "z": "3d6c52b09293e59e",
        "name": "function 21",
        "func": "var mqtt_tag = msg.payload[\"tag\"].split(\"/\");\nvar datosJson = global.get(\"datosJson\");\nif(datosJson === undefined){\n    datosJson = {}; \n}\n\ndatosJson[mqtt_tag[1]] = msg.payload[\"v\"];\nglobal.set(\"datosJson\",datosJson);\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 600,
        "y": 1431,
        "wires": [
            [
                "89f742179eb5e986"
            ]
        ]
    },
    {
        "id": "7898f6fa0eafef37",
        "type": "function",
        "z": "3d6c52b09293e59e",
        "name": "function 31",
        "func": "/*msg.payload = {\n    \"Manual_Automatico\" : global.get(\"Manual_Automatico\") || null,\n    \"Confirmacion_Marcha_Motor1\" : global.get(\"Confirmacion_Marcha_Motor1\") || null,\n    \"Confirmacion_Marcha_Motor2\" : global.get(\"Confirmacion_Marcha_Motor2\") || null,\n\n}*/\n\nmsg.payload = global.get(\"datosJsonB1\") || {};\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 810,
        "y": 2200,
        "wires": [
            [
                "a87ccf2b963e33c4",
                "d8c037c4bdb29fe6"
            ]
        ]
    },
    {
        "id": "7f0e03a0e4d25e29",
        "type": "http in",
        "z": "3d6c52b09293e59e",
        "name": "",
        "url": "/lcm/get_datos_b1",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 160,
        "y": 2200,
        "wires": [
            [
                "69422862be104eb4"
            ]
        ]
    },
    {
        "id": "a87ccf2b963e33c4",
        "type": "http response",
        "z": "3d6c52b09293e59e",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 1030,
        "y": 2220,
        "wires": []
    },
    {
        "id": "d8c037c4bdb29fe6",
        "type": "debug",
        "z": "3d6c52b09293e59e",
        "name": "debug 26",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1040,
        "y": 2300,
        "wires": []
    },
    {
        "id": "47d55960b4106605",
        "type": "function",
        "z": "3d6c52b09293e59e",
        "name": "function 32",
        "func": "/*msg.payload = {\n    \"Manual_Automatico\" : global.get(\"Manual_Automatico\") || null,\n    \"Confirmacion_Marcha_Motor1\" : global.get(\"Confirmacion_Marcha_Motor1\") || null,\n    \"Confirmacion_Marcha_Motor2\" : global.get(\"Confirmacion_Marcha_Motor2\") || null,\n\n}*/\n\nmsg.payload = global.get(\"datosJsonB2\") || {};\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 810,
        "y": 2340,
        "wires": [
            [
                "9afb1354b80006e0",
                "704f2292926c19c9"
            ]
        ]
    },
    {
        "id": "2549606de66dc1aa",
        "type": "http in",
        "z": "3d6c52b09293e59e",
        "name": "",
        "url": "/lcm/get_datos_b2",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 160,
        "y": 2340,
        "wires": [
            [
                "936bf25ddb38abdc"
            ]
        ]
    },
    {
        "id": "9afb1354b80006e0",
        "type": "http response",
        "z": "3d6c52b09293e59e",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 1030,
        "y": 2340,
        "wires": []
    },
    {
        "id": "704f2292926c19c9",
        "type": "debug",
        "z": "3d6c52b09293e59e",
        "name": "debug 27",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1040,
        "y": 2420,
        "wires": []
    },
    {
        "id": "2cf4fa303d22e022",
        "type": "http in",
        "z": "3d6c52b09293e59e",
        "name": "Página principal",
        "url": "/lcm/index",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 100,
        "y": 2500,
        "wires": [
            [
                "0b23b34eacccc553"
            ]
        ]
    },
    {
        "id": "2910bd1293652468",
        "type": "template",
        "z": "3d6c52b09293e59e",
        "name": "HTML",
        "field": "payload",
        "fieldType": "msg",
        "format": "html",
        "syntax": "mustache",
        "template": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Monitoreo de Bombas de Vacio</title>\n\n    <link rel=\"stylesheet\" href=\"https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.5.0/css/all.min.css\">\n    <link rel=\"stylesheet\" href=\"/lcm/normalize.css\">\n    <link rel=\"stylesheet\" href=\"/lcm/styles.css\">\n</head>\n<body class=\"body-normal\">\n    <header>\n        <div class=\"logo-oapsa\">\n            <img src=\"/lcm/logo_oa.png\" alt=\"Logo Oapsa\">\n            <!-- <div class=\"logo-texto\">\n                <h1>OAPSA</h1>\n                <p>Automation</p>\n            </div> -->\n        </div>\n        <div class=\"barra\">\n            <div class=\"logo\">\n                <img src=\"\" alt=\"\">\n            </div>\n            <nav>\n                <!-- <a href=\"#\">home</a> -->\n                <a class=\"logout-bt\" href=\"#\">Cerrar Sesión</a>\n            </nav>\n        </div>\n    </header>\n\n    <main>\n        <h2>Monitoreo de Tanque de Vacío</h2>\n        <div class=\"modo-auto-manual\">\n            <h2>Automatico</h2>\n        </div>\n        <div class=\"contenedor contenido-main\">\n            <div class=\"contenido-main__elemeto ident-principal1 elemento bomba-principal\">\n                <div class=\"icon-onoff\"><i class=\"fa-solid fa-power-off\" style=\"color: #74C0FC;\"></i></div>\n                <h3>Bomba 1</h3>\n                <div class=\"parrafo bomba1\">\n                    <p>Apagado</p>\n                </div>\n                <p>horas: <span id=\"horas-marcha1\" class=\"horas-marcha1\">--</span> h</p>\n                <p>Mantenimientos Realizados: <span class=\"num-mant\">--</span></p>\n                <div class=\"mantenimiento mant1\">\n                    <p></p>\n                </div>\n            </div>\n            <div class=\"contenido-main__elemeto elemento tanque\">\n                <h3>Tanque</h3>\n                <img src=\"/lcm/tanque_lleno.png\" alt=\"tanque de vacio\">\n            </div>\n            <div class=\"contenido-main__elemeto ident-principal2 elemento \">\n                <div class=\"icon-onoff\"><i class=\"fa-solid fa-power-off\" style=\"color: #74C0FC;\"></i></div>\n                <h3>Bomba 2</h3>\n                <div class=\"parrafo bomba2\">\n                    <p>Apagado</p>\n                </div>\n                <p>horas: <span id=\"horas-marcha2\" class=\"horas-marcha2\">--</span> h</p>\n                <p>Mantenimientos Realizados: <span class=\"num-mant\">--</span></p>\n                <div class=\"mantenimiento mant2\">\n                    <p></p>\n                </div>\n            </div>\n\n            <div class=\"contenido-main__elemeto elemento info-adicional\">\n                <h3>Informacion Adicional del Sistema</h3>\n                <div class=\"alternancia\">\n                    <i class=\"fa-solid fa-arrows-left-right\" style=\"color: #74C0FC;\"></i>\n                    <p>Alternancia Activada</p>\n                </div>\n\n            </div>\n\n            <div class=\"contenido-main__elemeto elemento avisos\">\n                <h3>Avisos</h3>\n                <div class=\"aviso\">\n                    <p>Falla de Bomba 1: </p>\n                    <div id=\"falla-1\" class=\"falla\"></div>\n                </div>\n\n                <div class=\"aviso\">\n                    <p>Falla de Bomba 2: </p>\n                    <div id=\"falla-2\" class=\"falla\"></div>\n                </div>\n\n                <div class=\"aviso\">\n                    <p>Parada de Emergencia Pulsada: </p>\n                    <div id=\"PE\" class=\"parada-emergencia\"></div>\n                </div>\n\n                <div class=\"aviso\">\n                    <p>Tiempo sin Refuerzo Excedido: </p>\n                    <div id=\"sin-refuerzo\" class=\"tiempo-refuerzo\"></div>\n                </div>\n\n                <div class=\"aviso\">\n                    <p>Refuerzo Activo por mucho tiempo: </p>\n                    <div id=\"con-refuerzo\" class=\"tiempo-refuerzo\"></div>\n                </div>\n\n            </div>\n        </div>\n    </main>\n\n    <footer class=\"footer\">\n        <p>2025 Monitoreo de Bombas de Vacio. Desarrollado por <a href=\"https://www.oaparaguay.com/\">OAPSA</a></p>\n    </footer>\n    \n    <script src=\"https://unpkg.com/mqtt/dist/mqtt.min.js\"></script>\n    <script type=\"module\" src=\"/lcm/app.js\"></script>\n</body>\n</html>",
        "x": 690,
        "y": 2480,
        "wires": [
            [
                "bbe6d15d6612cc51"
            ]
        ]
    },
    {
        "id": "bbe6d15d6612cc51",
        "type": "change",
        "z": "3d6c52b09293e59e",
        "name": "Header HTML",
        "rules": [
            {
                "t": "set",
                "p": "headers.Content-Type",
                "pt": "msg",
                "to": "text/html",
                "tot": "str"
            }
        ],
        "x": 860,
        "y": 2500,
        "wires": [
            [
                "cc197e4ad3a17c02"
            ]
        ]
    },
    {
        "id": "cc197e4ad3a17c02",
        "type": "http response",
        "z": "3d6c52b09293e59e",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 1050,
        "y": 2520,
        "wires": []
    },
    {
        "id": "01410dbfd75238c4",
        "type": "http in",
        "z": "3d6c52b09293e59e",
        "name": "APPJS",
        "url": "/lcm/app.js",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 70,
        "y": 2640,
        "wires": [
            [
                "1c9bc851e0e716f0"
            ]
        ]
    },
    {
        "id": "02b5e8b94e44cb3a",
        "type": "template",
        "z": "3d6c52b09293e59e",
        "name": "JS Code",
        "field": "payload",
        "fieldType": "msg",
        "format": "javascript",
        "syntax": "plain",
        "template": "import Bomba from \"./Bomba.js\";\n\nconst bomba1 = new Bomba(1);\nconst bomba2 = new Bomba(2);\nconst avisos = [];\n\nlet miObjeto = {\n  miVariable: 10\n};\n\nconst SERVER = \"localhost\";\n\nconst URL = `http://${SERVER}:1880/lcm/get_datos_sistema`;\nlet datos = {};\nsetInterval(()=>{\n    fetch(URL, {\n        method: \"GET\",\n        credentials: \"include\"   // 🔑 Esto hace que se envíen cookies\n    })\n        .then((response) => response.json())\n        .then((data) => {\n            datos = data;\n            //console.log(datos);\n        })\n},1000);\n\nconst modoOperacion = document.querySelector(\".modo-auto-manual h2\"); \nconst contenedorImagenTanque = document.querySelector(\".tanque\");\n\nconst actualizarSistema = async () => {\n    await bomba2.actualizarAtributos();\n    await bomba1.actualizarAtributos();\n\n    //Actualizar el Modo de Funcionamiento\n    if(datos[\"Manual_Automatico\"] === false){\n        modoOperacion.textContent = \"Manual\";\n    }else{\n        modoOperacion.textContent = \"Automático\";\n    }\n\n    //Actualizacion de Motror Principal Manualmente\n    if(datos[\"Alternar_Motor_Manual\"] === true){\n        bomba1.principal = false;\n        bomba2.principal = true;\n    }else{\n        bomba2.principal = false;\n        bomba1.principal = true;\n    }\n\n    //Actualizar alternancia de motores\n    const bomba1EsPrincipal = document.querySelector(\".ident-principal1\");\n    bomba1.setPrincipal(bomba1EsPrincipal);\n\n    const bomba2EsPrincipal = document.querySelector(\".ident-principal2\");\n    bomba2.setPrincipal(bomba2EsPrincipal);\n\n    //Estado de los motores\n    const estadoBomba1 = document.querySelector(\".bomba1\"); \n    bomba1.renderizarEstado(estadoBomba1)\n\n    const estadoBomba2 = document.querySelector(\".bomba2\");\n    bomba2.renderizarEstado(estadoBomba2)\n\n    //Actualizar Imagen de Tanque \n    const imagen = contenedorImagenTanque.children[1];\n    if(datos[\"Entrada_Vacuostato\"] === false){\n        imagen.src = \"/lcm/tanque_vacio.png\";\n    }else{\n        imagen.src = \"/lcm/tanque_lleno.png\";\n    }\n\n    //Parada de Emergencia\n    const bgbody = document.querySelector(\"body\");\n    const PE_aviso = document.querySelector(\"#PE\");\n    if(datos[\"Parada_de_Emergencia_Pulsada\"] === true){\n        bgbody.classList.add(\"parada_emergencia\");\n        bgbody.classList.remove(\"body-normal\");\n\n        PE_aviso.classList.add(\"alarma-activa\");\n        PE_aviso.classList.remove(\"alarma-desactivada\");\n    }else{\n        bgbody.classList.remove(\"parada_emergencia\");\n        bgbody.classList.add(\"body-normal\");\n\n        PE_aviso.classList.remove(\"alarma-activa\");\n        PE_aviso.classList.add(\"alarma-desactivada\");\n    }\n\n    //Mantenimientos\n    const mantenimientos = document.querySelectorAll(\".mantenimiento\");\n    bomba1.mantenimiento(mantenimientos);\n    bomba2.mantenimiento(mantenimientos);\n\n    const numMantenimientos = document.querySelectorAll(\".num-mant\");\n    bomba1.mantenimientoRealizada(numMantenimientos[0]);\n    bomba2.mantenimientoRealizada(numMantenimientos[1]);\n\n    //horas de funcionamiento\n    const horasMarcha1 = document.querySelector(\"#horas-marcha1\");\n    const horasMarcha2 = document.querySelector(\"#horas-marcha2\");\n    bomba2.renderizarHorasMarcha(horasMarcha2);\n    bomba1.renderizarHorasMarcha(horasMarcha1);\n\n    //alternancia\n    const alternancia = document.querySelector(\".alternancia\").querySelector(\"p\");\n    if(datos[\"Alternar_Motores_Automaticamente\"] === true){\n        alternancia.textContent = \"Alternancia activada\";\n    }else{\n        alternancia.textContent = \"Alternancia desactivada\";\n    }\n    //Avisos\n    const falla1 = document.querySelector(\"#falla-1\");\n    const falla2 = document.querySelector(\"#falla-2\");\n    bomba1.fallaBomba(falla1);\n    bomba2.fallaBomba(falla2);\n\n    const sinRef = document.querySelector(\"#sin-refuerzo\");\n    if(datos[\"Alarma_Tiempo_Sin_Refuerzo_Excedido\"] === true){\n        sinRef.classList.add(\"alarma-activa\");\n        sinRef.classList.remove(\"alarma-desactivada\");\n    }else{\n        sinRef.classList.remove(\"alarma-activa\");\n        sinRef.classList.add(\"alarma-desactivada\");\n    }\n\n    const conRef = document.querySelector(\"#con-refuerzo\");\n    if(datos[\"Alarma_refuerzo_mucho_tiempo\"] === true){\n        conRef.classList.add(\"alarma-activa\");\n        conRef.classList.remove(\"alarma-desactivada\");\n    }else{\n        conRef.classList.remove(\"alarma-activa\");\n        conRef.classList.add(\"alarma-desactivada\");\n    }\n\n}\nsetInterval(actualizarSistema,1000);\n\nconst botonLogout = document.querySelector(\".logout-bt\");\nbotonLogout.addEventListener(\"click\", ()=>{\n    fetch(`http://${SERVER}:1880/lcm/logout`, {\n      method: 'GET',\n      headers: { 'Accept': 'application/json' },\n      credentials: 'include'\n    }).then(response => { \n        if (response.ok) {\n            window.location.href = `http://${SERVER}:1880/lcm/login`;\n            //return response.json();\n        } else {\n            return new Error(\"Error en logout\")\n        }\n    }).catch((e) => {\n        console.log(\"Error en logout\", e);\n    })\n});\n\n",
        "x": 620,
        "y": 2640,
        "wires": [
            [
                "d3b3eeedc29e2721"
            ]
        ]
    },
    {
        "id": "d3b3eeedc29e2721",
        "type": "change",
        "z": "3d6c52b09293e59e",
        "name": "Header JS",
        "rules": [
            {
                "t": "set",
                "p": "headers.Content-Type",
                "pt": "msg",
                "to": "application/javascript",
                "tot": "str"
            }
        ],
        "x": 810,
        "y": 2640,
        "wires": [
            [
                "8d6b4cda918c7668"
            ]
        ]
    },
    {
        "id": "8d6b4cda918c7668",
        "type": "http response",
        "z": "3d6c52b09293e59e",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 990,
        "y": 2640,
        "wires": []
    },
    {
        "id": "09dbd3a3943c6a47",
        "type": "http in",
        "z": "3d6c52b09293e59e",
        "name": "CSS",
        "url": "/lcm/styles.css",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 60,
        "y": 2920,
        "wires": [
            [
                "76ca11b28cab1f87"
            ]
        ]
    },
    {
        "id": "76ca11b28cab1f87",
        "type": "template",
        "z": "3d6c52b09293e59e",
        "name": "CSS Code",
        "field": "payload",
        "fieldType": "msg",
        "format": "css",
        "syntax": "plain",
        "template": ":root{\n    --blanco: #ffffff;\n    --oscuro: #101926;\n    --primario: #0e1828; \n    --secundario: #1a2436;\n    --gris: #757575;  \n    --grisClaro:#DFE9F3; \n    --verdeagua:#32be94; \n    --rojo: rgb(165, 33, 33);\n    --rojo-apagado: rgba(165, 33, 33, 0.5);\n    --rojo-alarma: rgb(255, 0, 0);\n\n    --fuente: \"Krub\", sans-serif;\n}\n\nhtml{\n    font-size: 62.5%;\n    box-sizing: border-box; /*hack para boxmodel*/\n    scroll-snap-type: y mandatory; /*para scroll snap*/\n}\n\n*, *:bfore, *:after{\n    box-sizing: inherit; /*hack para boxmodel*/\n}\n\nbody{\n    font-size: 16px; /* 1rem = 16px */\n    padding: 0;\n    margin: 0;\n    background-repeat: no-repeat;\n    background-color: var(--primario);\n}\n\nh1{\n    font-size: 3.8rem;\n}\n\nh2{\n    font-size: 2.8rem;\n}\n\nh3{\n    font-size: 1.8rem;\n}\n\nh1,h2,h3{\n    text-align: center;\n    font-family: var(--fuente);\n}\n\n/*Contenido*/\nheader{\n    display: flex;\n    flex-direction: row;\n    justify-content: space-between;\n    background-color: var(--secundario);\n}\n\n.logo-oapsa{\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    width: 20rem;\n    background-color: var(--blanco);\n}\n\n.logo-texto{\n    display: flex;\n    flex-direction: column;\n    justify-content: center;\n    align-items: center;\n    margin:0;\n}\n\n.logo-oapsa img{\n    width: 100%;\n}\n\n.logo-oapsa h1{\n    font-size: 2.5rem;\n    color: var(--oscuro);\n    margin: 0;\n}\n\n.logo-oapsa p{\n    font-size: 1.5rem;\n    color: var(--rojo-alarma);\n    margin: 0;\n}\n\n.barra{\n    display: flex;\n    justify-content: space-between;\n    align-items: center;\n}\n\nnav{\n    max-width: 30rem;\n    display: flex;\n    justify-content: space-between;\n    align-items: center;\n    padding: 1rem 1rem;\n}\n\nmain{\n    max-width: 100%;\n    margin: 0 auto;\n    padding: 1rem;\n}\n\n@media (min-width: 650px) {\n    main{\n        max-width: 70rem;\n        padding: 2rem;\n    }\n    \n}\n\nmain h1,h2{\n    color: var(--blanco);\n}\n\n.modo-auto-manual {\n    margin-bottom: 1.5rem;\n    text-align: center;\n}\n\n.modo-auto-manual h2{\n    display: inline;\n    padding: .5rem 1rem;\n    border-radius: .5rem;\n    background-color: #32be94;\n    font-size: 2rem;\n}\n\n.contenido-main{\n    display: grid;\n    grid-template-columns: repeat(2,1fr);\n    gap: 1rem;\n}\n\n@media (min-width: 650px) {\n    .contenido-main{\n        display: grid;\n        grid-template-columns: repeat(3,1fr);\n        gap: 2rem;\n    }\n}\n\n\n.elemento{\n    display: flex;\n    flex-direction: column;\n    justify-content: start;\n    align-items: center;\n    background-color: var(--oscuro);\n    border-radius: 5px;\n    padding: 1rem;\n    box-shadow: 0 2px 5px rgba(16, 16, 53, 0.849);\n}\n\n@media (min-width: 650px) {\n    .elemento{\n        padding: 2rem;\n    }\n    \n}\n\n.tanque{\n    grid-column: 1/3;\n    grid-row: 1/2;\n}\n\n@media (min-width: 650px) {\n    .tanque{\n        grid-column: 2/3;\n        grid-row: 1/2;\n    }\n}\n\n.elemento h3{\n    color: var(--blanco);\n    margin: 1rem 0;\n}\n\n.parrafo{\n    background-color: var(--rojo);\n    border-radius: 1rem;\n    height: 3.5rem;\n    display: block;\n    width: 100%;\n}\n\n.elemento p{\n    font-size: 1.5rem;\n    font-family: var(--fuente);\n    font-weight: bold;\n    margin: .5rem 0;\n    display: inline-block;\n    width: 100%;\n    text-align: center;\n    color: var(--blanco);\n}\n\n@media (min-width: 650px) {\n    .elemento p{\n        font-size: 2rem;\n    }\n}\n\n.icon-onoff{\n    display: flex;\n    justify-content: center;\n}\n\n.icon-onoff i{\n    font-size: 4rem;\n}\n\n.avisos{\n    grid-column: 1 /3;\n    gap: .5rem;\n}\n\n.aviso{\n    width: 100%;\n    display: flex;\n\n}\n\n.aviso p{\n    margin: 0;\n    font-size: 1.3rem;\n    color: var(--blanco);\n    margin-left: 1rem;\n    text-align: left;\n}\n\n.aviso div{\n    width: 2rem;\n    height: 2rem;\n    margin-bottom: 1rem;\n    border-radius: 50%;\n}\n\n.info-adicional{\n    grid-column: 1 /3;\n}\n\n@media (min-width: 650px) {\n    .avisos{\n        grid-column: 3 /4;\n    }\n    .info-adicional{\n        grid-column: 1 /3;\n    }\n}\n\n.info-adicional h3, .avisos h3{\n    margin: 0;\n    font-size: 2rem;\n}\n\nimg{\n    width: 60%;\n}\n\n.alternancia{\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    width: 70%;\n}\n\n.alternancia i{\n    font-size: 3rem;\n    color: var(--verdeagua);\n}\n\n.footer{\n    background-color: var(--primario);\n    display: flex;\n    flex-direction: column;\n    justify-content: end;\n}\n\n.footer p{\n    margin: 0;\n    color: var(--blanco);\n    text-align: center;\n    margin-top: 1rem;\n}\n\n.footer a{\n    text-decoration: none;\n    color: var(--blanco);\n}\n\n\n\n\n/*Utilidades*/\n.contenedor{\n    max-width: 120rem;\n    margin: 0 auto;\n}\n\n.bomba-principal{\n    border: 2px solid red;\n}\n\n.encendido{\n    background-color: var(--verdeagua);\n}\n\n.body-normal{\n    background-image: linear-gradient(to bottom, var(--primario) 0%, var(--secundario) 100%);\n}\n\n.parada_emergencia{\n    background-color: var(--rojo);\n}\n\n.mantenimiento p{\n    font-size: 1.5rem;\n\n}\n\n.preventivo {\n    background-color: rgb(206, 206, 18);\n    width: 80%;\n    border-radius: 1rem;\n}\n\n.correctivo {\n    background-color: rgb(206, 18, 18);\n    width: 80%;\n    border-radius: 1rem;\n}\n\n.alarma-activa{\n    background-color: var(--rojo-alarma);\n}\n\n.alarma-desactivada{\n    background-color: var(--rojo-apagado);\n}\n\n/*Inicio de Sesion*/\n\n.formulario{\n    display: flex;\n    flex-direction: column;\n    justify-content: center;\n    align-items: center;\n}\n\n.formulario fieldset{\n    display: flex;\n    flex-direction: column;\n    gap: 2rem\n}\n\n.logout-bt{\n    text-decoration:none;\n    font-size: 1.3rem;\n    font-weight: 900;\n    text-transform: uppercase;\n    font-family: var(--fuente);\n    color: var(--blanco);\n}",
        "x": 350,
        "y": 2920,
        "wires": [
            [
                "5b884bbd5d583ff1"
            ]
        ]
    },
    {
        "id": "5b884bbd5d583ff1",
        "type": "change",
        "z": "3d6c52b09293e59e",
        "name": "Header CSS",
        "rules": [
            {
                "t": "set",
                "p": "headers.Content-Type",
                "pt": "msg",
                "to": "text/css",
                "tot": "str"
            }
        ],
        "x": 550,
        "y": 2920,
        "wires": [
            [
                "8247ee2ac09efac3"
            ]
        ]
    },
    {
        "id": "8247ee2ac09efac3",
        "type": "http response",
        "z": "3d6c52b09293e59e",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 710,
        "y": 2920,
        "wires": []
    },
    {
        "id": "f27f85cf3300507a",
        "type": "http in",
        "z": "3d6c52b09293e59e",
        "name": "BOMBAJS",
        "url": "/lcm/Bomba.js",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 80,
        "y": 2780,
        "wires": [
            [
                "d02dcf8c6da55eb6"
            ]
        ]
    },
    {
        "id": "1bd5879b78fbe4c1",
        "type": "template",
        "z": "3d6c52b09293e59e",
        "name": "JS Code",
        "field": "payload",
        "fieldType": "msg",
        "format": "javascript",
        "syntax": "plain",
        "template": "const SERVER = \"localhost\";\nclass Bomba {\n\n  constructor(id, estado, falla, mantenimientoPrev, mantenimientoCor, horasMarcha, principal, mantenimientos) {\n    this.id = id || 0;\n    this.estado = estado || false;\n    this.falla = falla || false;\n    this.mantenimientoPrev = mantenimientoPrev || false;\n    this.mantenimientoCor = mantenimientoCor || false;\n    this.horasMarcha = horasMarcha || \"\";\n    this.principal = principal || false;\n    this.contadorMantenimientos = mantenimientos || 0;\n  }\n\n\n  async actualizarAtributos() {\n    const datos = await this.getDatos();\n    console.log(datos);\n\n    this.estado = datos.Confirmacion_Marcha_Motor;\n    this.mantenimientoPrev = datos.Alarma_Manten_Prev_B;\n    this.mantenimientoCor = datos.Alarma_Manten_Correct_B;\n    this.falla = datos.Entrada_Falla_Motor;\n    this.horasMarcha = datos.Horas_de_Marcha_Motor;\n    this.contadorMantenimientos = datos.Contador_de_Mantenimientos_B;\n  }\n\n  async getDatos() {\n    const response = await fetch(`http://${SERVER}:1880/lcm/get_datos_b${this.id}`);\n    const data = await response.json();\n    return data;\n  }\n\n  renderizarEstado(estadoBomba) {\n    const hijo = estadoBomba.children[0];\n    if (this.estado === true) {\n      hijo.textContent = \"Encendido\";\n      estadoBomba.classList.add(\"encendido\");\n    } else {\n      hijo.textContent = \"Apagado\";\n      estadoBomba.classList.remove(\"encendido\");\n    }\n  }\n\n  setPrincipal(bombaEsPrincipal) {\n    if (this.principal === true) {\n      bombaEsPrincipal.classList.add(\"bomba-principal\");\n    } else {\n      bombaEsPrincipal.classList.remove(\"bomba-principal\");\n    }\n  }\n\n  mantenimiento(mantenimientos) {\n    const texto = mantenimientos[this.id - 1].querySelector(\"p\");\n    if (this.mantenimientoPrev === true) {\n      texto.textContent = \"Preventivo\";\n      mantenimientos[this.id - 1].classList.add(\"preventivo\");\n    } else if (this.mantenimientoCor === true) {\n      texto.textContent = \"Correctivo\";\n      mantenimientos[this.id - 1].classList.add(\"correctivo\");\n    } else {\n      texto.textContent = \"\";\n      mantenimientos[this.id - 1].classList.remove(\"correctivo\");\n      mantenimientos[this.id - 1].classList.remove(\"preventivo\");\n    }\n  }\n\n  renderizarHorasMarcha(horasMarcha) {\n    horasMarcha.textContent = this.horasMarcha;\n  }\n\n  fallaBomba(falla) {\n    if (this.falla === false) {\n      falla.classList.add(\"alarma-activa\");\n      falla.classList.remove(\"alarma-desactivada\");\n    } else {\n      falla.classList.remove(\"alarma-activa\");\n      falla.classList.add(\"alarma-desactivada\");\n    }\n  }\n\n  mantenimientoRealizada(mantenimiento) {\n    mantenimiento.textContent = this.contadorMantenimientos;\n  }\n\n}\n\nexport default Bomba;",
        "x": 620,
        "y": 2780,
        "wires": [
            [
                "9d5160e5413db459"
            ]
        ]
    },
    {
        "id": "9d5160e5413db459",
        "type": "change",
        "z": "3d6c52b09293e59e",
        "name": "Header JS",
        "rules": [
            {
                "t": "set",
                "p": "headers.Content-Type",
                "pt": "msg",
                "to": "application/javascript",
                "tot": "str"
            }
        ],
        "x": 810,
        "y": 2780,
        "wires": [
            [
                "08fb9d9a723b3125"
            ]
        ]
    },
    {
        "id": "08fb9d9a723b3125",
        "type": "http response",
        "z": "3d6c52b09293e59e",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 990,
        "y": 2780,
        "wires": []
    },
    {
        "id": "d7d85054afc1afc1",
        "type": "http in",
        "z": "3d6c52b09293e59e",
        "name": "NORMALIZECSS",
        "url": "/lcm/normalize.css",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 100,
        "y": 3000,
        "wires": [
            [
                "f8b9a42b33f6c33d"
            ]
        ]
    },
    {
        "id": "f8b9a42b33f6c33d",
        "type": "template",
        "z": "3d6c52b09293e59e",
        "name": "CSS Code",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "plain",
        "template": "/*! normalize.css v8.0.1 | MIT License | github.com/necolas/normalize.css */\n\n/* Document\n   ========================================================================== */\n\n/**\n * 1. Correct the line height in all browsers.\n * 2. Prevent adjustments of font size after orientation changes in iOS.\n */\n\nhtml {\n  line-height: 1.15; /* 1 */\n  -webkit-text-size-adjust: 100%; /* 2 */\n}\n\n/* Sections\n   ========================================================================== */\n\n/**\n * Remove the margin in all browsers.\n */\n\nbody {\n  margin: 0;\n}\n\n/**\n * Render the `main` element consistently in IE.\n */\n\nmain {\n  display: block;\n}\n\n/**\n * Correct the font size and margin on `h1` elements within `section` and\n * `article` contexts in Chrome, Firefox, and Safari.\n */\n\nh1 {\n  font-size: 2em;\n  margin: 0.67em 0;\n}\n\n/* Grouping content\n   ========================================================================== */\n\n/**\n * 1. Add the correct box sizing in Firefox.\n * 2. Show the overflow in Edge and IE.\n */\n\nhr {\n  box-sizing: content-box; /* 1 */\n  height: 0; /* 1 */\n  overflow: visible; /* 2 */\n}\n\n/**\n * 1. Correct the inheritance and scaling of font size in all browsers.\n * 2. Correct the odd `em` font sizing in all browsers.\n */\n\npre {\n  font-family: monospace, monospace; /* 1 */\n  font-size: 1em; /* 2 */\n}\n\n/* Text-level semantics\n   ========================================================================== */\n\n/**\n * Remove the gray background on active links in IE 10.\n */\n\na {\n  background-color: transparent;\n}\n\n/**\n * 1. Remove the bottom border in Chrome 57-\n * 2. Add the correct text decoration in Chrome, Edge, IE, Opera, and Safari.\n */\n\nabbr[title] {\n  border-bottom: none; /* 1 */\n  text-decoration: underline; /* 2 */\n  text-decoration: underline dotted; /* 2 */\n}\n\n/**\n * Add the correct font weight in Chrome, Edge, and Safari.\n */\n\nb,\nstrong {\n  font-weight: bolder;\n}\n\n/**\n * 1. Correct the inheritance and scaling of font size in all browsers.\n * 2. Correct the odd `em` font sizing in all browsers.\n */\n\ncode,\nkbd,\nsamp {\n  font-family: monospace, monospace; /* 1 */\n  font-size: 1em; /* 2 */\n}\n\n/**\n * Add the correct font size in all browsers.\n */\n\nsmall {\n  font-size: 80%;\n}\n\n/**\n * Prevent `sub` and `sup` elements from affecting the line height in\n * all browsers.\n */\n\nsub,\nsup {\n  font-size: 75%;\n  line-height: 0;\n  position: relative;\n  vertical-align: baseline;\n}\n\nsub {\n  bottom: -0.25em;\n}\n\nsup {\n  top: -0.5em;\n}\n\n/* Embedded content\n   ========================================================================== */\n\n/**\n * Remove the border on images inside links in IE 10.\n */\n\nimg {\n  border-style: none;\n}\n\n/* Forms\n   ========================================================================== */\n\n/**\n * 1. Change the font styles in all browsers.\n * 2. Remove the margin in Firefox and Safari.\n */\n\nbutton,\ninput,\noptgroup,\nselect,\ntextarea {\n  font-family: inherit; /* 1 */\n  font-size: 100%; /* 1 */\n  line-height: 1.15; /* 1 */\n  margin: 0; /* 2 */\n}\n\n/**\n * Show the overflow in IE.\n * 1. Show the overflow in Edge.\n */\n\nbutton,\ninput { /* 1 */\n  overflow: visible;\n}\n\n/**\n * Remove the inheritance of text transform in Edge, Firefox, and IE.\n * 1. Remove the inheritance of text transform in Firefox.\n */\n\nbutton,\nselect { /* 1 */\n  text-transform: none;\n}\n\n/**\n * Correct the inability to style clickable types in iOS and Safari.\n */\n\nbutton,\n[type=\"button\"],\n[type=\"reset\"],\n[type=\"submit\"] {\n  -webkit-appearance: button;\n}\n\n/**\n * Remove the inner border and padding in Firefox.\n */\n\nbutton::-moz-focus-inner,\n[type=\"button\"]::-moz-focus-inner,\n[type=\"reset\"]::-moz-focus-inner,\n[type=\"submit\"]::-moz-focus-inner {\n  border-style: none;\n  padding: 0;\n}\n\n/**\n * Restore the focus styles unset by the previous rule.\n */\n\nbutton:-moz-focusring,\n[type=\"button\"]:-moz-focusring,\n[type=\"reset\"]:-moz-focusring,\n[type=\"submit\"]:-moz-focusring {\n  outline: 1px dotted ButtonText;\n}\n\n/**\n * Correct the padding in Firefox.\n */\n\nfieldset {\n  padding: 0.35em 0.75em 0.625em;\n}\n\n/**\n * 1. Correct the text wrapping in Edge and IE.\n * 2. Correct the color inheritance from `fieldset` elements in IE.\n * 3. Remove the padding so developers are not caught out when they zero out\n *    `fieldset` elements in all browsers.\n */\n\nlegend {\n  box-sizing: border-box; /* 1 */\n  color: inherit; /* 2 */\n  display: table; /* 1 */\n  max-width: 100%; /* 1 */\n  padding: 0; /* 3 */\n  white-space: normal; /* 1 */\n}\n\n/**\n * Add the correct vertical alignment in Chrome, Firefox, and Opera.\n */\n\nprogress {\n  vertical-align: baseline;\n}\n\n/**\n * Remove the default vertical scrollbar in IE 10+.\n */\n\ntextarea {\n  overflow: auto;\n}\n\n/**\n * 1. Add the correct box sizing in IE 10.\n * 2. Remove the padding in IE 10.\n */\n\n[type=\"checkbox\"],\n[type=\"radio\"] {\n  box-sizing: border-box; /* 1 */\n  padding: 0; /* 2 */\n}\n\n/**\n * Correct the cursor style of increment and decrement buttons in Chrome.\n */\n\n[type=\"number\"]::-webkit-inner-spin-button,\n[type=\"number\"]::-webkit-outer-spin-button {\n  height: auto;\n}\n\n/**\n * 1. Correct the odd appearance in Chrome and Safari.\n * 2. Correct the outline style in Safari.\n */\n\n[type=\"search\"] {\n  -webkit-appearance: textfield; /* 1 */\n  outline-offset: -2px; /* 2 */\n}\n\n/**\n * Remove the inner padding in Chrome and Safari on macOS.\n */\n\n[type=\"search\"]::-webkit-search-decoration {\n  -webkit-appearance: none;\n}\n\n/**\n * 1. Correct the inability to style clickable types in iOS and Safari.\n * 2. Change font properties to `inherit` in Safari.\n */\n\n::-webkit-file-upload-button {\n  -webkit-appearance: button; /* 1 */\n  font: inherit; /* 2 */\n}\n\n/* Interactive\n   ========================================================================== */\n\n/*\n * Add the correct display in Edge, IE 10+, and Firefox.\n */\n\ndetails {\n  display: block;\n}\n\n/*\n * Add the correct display in all browsers.\n */\n\nsummary {\n  display: list-item;\n}\n\n/* Misc\n   ========================================================================== */\n\n/**\n * Add the correct display in IE 10+.\n */\n\ntemplate {\n  display: none;\n}\n\n/**\n * Add the correct display in IE 10.\n */\n\n[hidden] {\n  display: none;\n}",
        "x": 360,
        "y": 3000,
        "wires": [
            [
                "6c1609870e575142"
            ]
        ]
    },
    {
        "id": "6c1609870e575142",
        "type": "change",
        "z": "3d6c52b09293e59e",
        "name": "Header CSS",
        "rules": [
            {
                "t": "set",
                "p": "headers.Content-Type",
                "pt": "msg",
                "to": "text/css",
                "tot": "str"
            }
        ],
        "x": 560,
        "y": 3000,
        "wires": [
            [
                "9ee0ee71693ed0ab"
            ]
        ]
    },
    {
        "id": "9ee0ee71693ed0ab",
        "type": "http response",
        "z": "3d6c52b09293e59e",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 720,
        "y": 3000,
        "wires": []
    },
    {
        "id": "a8a7da586679a25c",
        "type": "http in",
        "z": "3d6c52b09293e59e",
        "name": "image_1",
        "url": "/lcm/tanque_lleno.png",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 70,
        "y": 3120,
        "wires": [
            [
                "d5f7c72787527b54"
            ]
        ]
    },
    {
        "id": "224860390d831dc7",
        "type": "http response",
        "z": "3d6c52b09293e59e",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 670,
        "y": 3120,
        "wires": []
    },
    {
        "id": "d5f7c72787527b54",
        "type": "function",
        "z": "3d6c52b09293e59e",
        "name": "function 33",
        "func": "var base64img = \"\";\n\nmsg.payload = Buffer.from(base64img,\"base64\");\nmsg.headers = {\n    \"Content-Type\": \"image/png\"\n}\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 330,
        "y": 3120,
        "wires": [
            [
                "224860390d831dc7"
            ]
        ]
    },
    {
        "id": "be6766e24bc39b0e",
        "type": "http in",
        "z": "3d6c52b09293e59e",
        "name": "image_2",
        "url": "/lcm/tanque_vacio.png",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 70,
        "y": 3180,
        "wires": [
            [
                "c71f85162ce8ae6e"
            ]
        ]
    },
    {
        "id": "2ba6117be40ee67d",
        "type": "http response",
        "z": "3d6c52b09293e59e",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 670,
        "y": 3180,
        "wires": []
    },
    {
        "id": "c71f85162ce8ae6e",
        "type": "function",
        "z": "3d6c52b09293e59e",
        "name": "function 34",
        "func": "var base64img = \"\";\n\nmsg.payload = Buffer.from(base64img, \"base64\");\nmsg.headers = {\n    \"Content-Type\": \"image/png\"\n}\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 330,
        "y": 3180,
        "wires": [
            [
                "2ba6117be40ee67d"
            ]
        ]
    },
    {
        "id": "95254c54ac5ce3c4",
        "type": "mqtt in",
        "z": "3d6c52b09293e59e",
        "name": "",
        "topic": "lcm/PLC/Parada_de_Emergencia_Pulsada",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "6aebf5a95ad76cc9",
        "nl": false,
        "rap": false,
        "rh": 0,
        "inputs": 0,
        "x": 250,
        "y": 1111,
        "wires": [
            [
                "72072f333d8ea523"
            ]
        ]
    },
    {
        "id": "72072f333d8ea523",
        "type": "function",
        "z": "3d6c52b09293e59e",
        "name": "function 35",
        "func": "var mqtt_tag = msg.payload[\"tag\"].split(\"/\");\nglobal.set(mqtt_tag[1],msg.payload[\"v\"]);\nvar datosJson = global.get(\"datosJson\");\nif(datosJson === undefined){\n    datosJson = {}; \n}\n\ndatosJson[mqtt_tag[1]] = msg.payload[\"v\"];\nglobal.set(\"datosJson\",datosJson);\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 600,
        "y": 1111,
        "wires": [
            [
                "4be44ec3ba934b32"
            ]
        ]
    },
    {
        "id": "4be44ec3ba934b32",
        "type": "debug",
        "z": "3d6c52b09293e59e",
        "name": "debug 28",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 850,
        "y": 1111,
        "wires": []
    },
    {
        "id": "ee8cddd34cd68fb0",
        "type": "mqtt in",
        "z": "3d6c52b09293e59e",
        "name": "",
        "topic": "lcm/PLC/Contador_de_Mantenimientos_B2",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "6aebf5a95ad76cc9",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 250,
        "y": 711,
        "wires": [
            [
                "92f6b04c79540e00"
            ]
        ]
    },
    {
        "id": "92f6b04c79540e00",
        "type": "function",
        "z": "3d6c52b09293e59e",
        "name": "function 36",
        "func": "var mqtt_tag = msg.payload[\"tag\"].split(\"/\");\nvar datosJson = global.get(\"datosJsonB2\");\nif(datosJson === undefined){\n    datosJson = {}; \n}\n\ndatosJson[mqtt_tag[1].slice(0,-1)] = msg.payload[\"v\"];\nglobal.set(\"datosJsonB2\",datosJson);\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 600,
        "y": 711,
        "wires": [
            [
                "362d090d2866f994"
            ]
        ]
    },
    {
        "id": "362d090d2866f994",
        "type": "debug",
        "z": "3d6c52b09293e59e",
        "name": "debug 29",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 850,
        "y": 711,
        "wires": []
    },
    {
        "id": "abf76c385fa4b7ca",
        "type": "mqtt in",
        "z": "3d6c52b09293e59e",
        "name": "",
        "topic": "lcm/PLC/Contador_de_Mantenimientos_B1",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "6aebf5a95ad76cc9",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 250,
        "y": 651,
        "wires": [
            [
                "365c6bbbe2e4c8f3"
            ]
        ]
    },
    {
        "id": "365c6bbbe2e4c8f3",
        "type": "function",
        "z": "3d6c52b09293e59e",
        "name": "function 37",
        "func": "var mqtt_tag = msg.payload[\"tag\"].split(\"/\");\nglobal.set(mqtt_tag[1],msg.payload[\"v\"]);\nvar datosJson = global.get(\"datosJsonB1\");\nif(datosJson === undefined){\n    datosJson = {}; \n}\n\ndatosJson[mqtt_tag[1].slice(0,-1)] = msg.payload[\"v\"];\nglobal.set(\"datosJsonB1\",datosJson);\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 600,
        "y": 651,
        "wires": [
            [
                "ad027c7be42863bc"
            ]
        ]
    },
    {
        "id": "ad027c7be42863bc",
        "type": "debug",
        "z": "3d6c52b09293e59e",
        "name": "debug 30",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 850,
        "y": 651,
        "wires": []
    },
    {
        "id": "16296b4647494663",
        "type": "http in",
        "z": "3d6c52b09293e59e",
        "name": "logo_OAPSA",
        "url": "/lcm/logo_oa.png",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 80,
        "y": 3257,
        "wires": [
            [
                "14012a68dd6051c4"
            ]
        ]
    },
    {
        "id": "8a062507d4a3d911",
        "type": "http response",
        "z": "3d6c52b09293e59e",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 670,
        "y": 3257,
        "wires": []
    },
    {
        "id": "14012a68dd6051c4",
        "type": "function",
        "z": "3d6c52b09293e59e",
        "name": "function 38",
        "func": "var base64img = \"iVBORw0KGgoAAAANSUhEUgAAAV8AAACQCAMAAACYophmAAAAYFBMVEX///8UFBT51dX55OQAAAD49PQNDQ3/AAAaGhrIAAAxMTHvoqLja2vpiIiMjIzxtbXeT09TU1NtbW3e3t69vb32w8P/KirPLy+lpaXHx8fQ0NDq6uq2trZGRkbLExPmAAB/dfTAAAAN6klEQVR42uzX2Y6rMBBFUWyXxwBhyEDm///Lm5BubgLBbrfwS+vsV0xkLUolJUMIIYQQQgghhBBCyJ8EQbrWO611xQGRJFnpZwUsEiR3WgM4Ke+QgEcKXgxwWt6hCiIpefUOJEvzYn7T8w6tgJKSVwMlKe8WKkvyYjuAF7x/K8k5eJO17V1yCd4kFfrZjnvme80FeH/VSg/NARdXey+X4I1PaB0CruxXHLzRrXQIOLdDHLyx5ToAzO1LHLzRvgHgwr4mwBtXoQPAlX2LgzeqrR7Hvb5WgDeqKgCc2/euHLwxCe0HXttxArwx8QDw3gcsprxrkEYBCzuJY3oXBOZ23FV88WJ6E01wDywwvemAsXsTrwgsh6TA+yCvyH7coSub+lI3TXfIfpY8nbyPj+Pa0A9uHldw7tJ0x4gbpFoRN+3nXe0f32CbhZNdTfdUHxG5ss2ClUTEZDZXSx8yzXn2jXPdX4HdU0TUbGRwJOhem2SCw7yyss/yLNCpVKTMa4yoOYTeMswY6rK5NmQ+pMh0n3UdqdFJ1wWE3eMGzZIr4jbWDfPaqx9Yloo+QtT+yegebzEX8J3GyLXTS9TEPp30fuQj9adOSwLr2zMd4t2P/ovMdWb/HRhTirFB2D8al/4gHcK+U7fzeJcY9f1M9TtiOFlm8zX9S9RliwL3RfHawnNHYsNKMO5S1xdHpL6FXRsYHqMavy+9x0wfdVPef7yb4XKDIBCES8shQxJapbUmyOT937JjwU0rwpypzf2LUXN87C6ME2MPobO268ztzJaKAaW0hoV2B9wfj6fD6Xjsy+GAesMXuS1nrQbrPMU1eewkDp/L4kmn+Bpfac/vtxqtSdzk5ZcVVDwYBj8Tt0bqdJAqAQUL7Qf4Y4J7uB15PpXUi/os4Q1yTgK32E9ICSuvlp/dL22Fbz72UcXQ1LQEJRainlsoppSZndfuvA/uP7LX3DK8HP2SUXFgoPujrEqiei9szqZ5gT05fJFIy2mJXahlExSzS5nK/cV0hvT7As6LntfwogpPJGI4KLFO0IWkH7c6NWLKXoUJYPHF1PyCcpYll1+00kq7Qvdqkq4RmKv/BLyKF0WV/FLGl9e+4voxym9E0xhVy+cLMhEKkry0TvogS3hdvL2VU4f0OMDUZ3hfiw3meOtWRkWwCbPbwBe/LAJWt4oLaPCV3oRJmMenRwGm/spIBwxLQB41wJd8cxaREOzJ5wvFOkQNPvHLzzMfYKFHAKa+ufLwDki9YmHsYQ2Q0ClLhaaNfEd8hd/QfhueITkHFvpnwMDb1PGitID1K+VWZ4HkfC3syeeLqwbwvYNQEFG26GUPwCcG3oaHd8yfHlT2YW1BPBjnBr4Zk6A2E0JAzRaStAdg4lzAwBsHxVoXSOh8h2kSVFj9cjdf7NcEX8AIqMwMfwN8YP2TjYXXMeQby+b+OyfxAJXq7soHaBHPOrjlfzbVKgzlb4BfWOfX8KKGjBpjJnLxgD9t4jtA9AA0edx6LheLgKpYiA+Y/w5x3zTXKl4gYq0pGL3yS/XZTItMvvktSYrSQ/3K4gzTUPqU6ouWc91tG4ahMJhJmud2wmynna/w+7/lMDg7sUZJPnJc/ksQOMLXw5vI9DTgN24VcyXw2lpon/KQR/AG6MA9ab6jQdGHPhgzCz8oX0g8+h7m4OlVwDdyFTOLF1en9GRlgEB3cpFGFbMkX+TW/r8++HkN3fTdsUtJpRzqRcDfyA+vaIqTxudcffoZ4lHuyfFtTKVDdu/MbnDyV8bciVAMS/3ievAnvYm5Am9ekzOXqyXU+hZabBgvxHUk36mOX2pYvx9wOpMJxi0ClPqTn7I3ki+20YCXC2B5s+EYaIR4lJwIvpOvXJW41LVza4yEA+TogVTLYwXvnLDbj7WAL7XEM5/lqysPKDrO188784s8xiKJ0mXqF2Oc7AbIY6q6uyfrNd6w9LDy8WHTumVy1nyCb+e0VGY87Wi+6f5xGzI7PG39ZCyRJKymJuczHHZK+PxGAR5L8pvb8/UQj3JPej7vZDj4yr5FMHaNjWnDxyoKexLvJuAbx5fJhpMBs7TpgIsLy3g7xe6XNBPhNUP7IGwahVJ/WQ8XKsa7GYLqUX9BAbYVVdHocHcH7Lx7gq+E5gx2cg6ta43oUqMzsZGxdWhZSvFCwO9Ufwz7ZUuaXqaVhnim6OPEar5SB7a0viQJ3UXd3iFApbtM3j6CZb5PS6U3SsGe9qdp82otHq3xPlqf2Z2V6qvDFCDwvEr0JxHxitWLAPHBVMrchdBg2IpxxsGh5YiDV9o977yiuHPmL/4aQVNYol4YU6FZ/r/2VexQZpEnUrulrEZbXQHmVXx1bY3jyJI6gT+Dl6jQkN1YwJ7yJ2SpYONLnDLs+l3Nt3VBN96lTiDb+9UJvOB7I8IDC3hixsfQuYd4smbs5Xw9+AJ3zsz9JN4V6r0AME4qDq9zCxDOIhhmzfRfpN/g6iFnrmHxKr4EXh4wBNweJDdENYhH4gb3LOfbzQfxtwlX1yRh2Jbj8cJW4L0KsAfgo+BbByupddywilvMtzfqELFmGN2j1AkTNsPZzM+NywG/p7dT84BnI/uywD+KXBu1AQmT54vHmia7RjDikdt32LiZiryE+Bn7qebFgJGLzTJlBL4Lqhg7xA1rOCV8sZ1ad8nwLzU3leWbpt85vLfv73iJFXYesL6BcSC4t3ExKLpUo0GM/Fm+k5PtEN7G8G7E/rRzpsuNq0AU9khuVzqAIQvBiTPc93/L64T4iEWFKNmq1FRxfszERmL5aJoWWASdY9r132XWxal8ivciZQlfkJVwsu2AgSSY8HveaqxeAejToc6LQuupjW+5zobX3bIeRkgABxWpsrTWznecfb1FWztYq034vBowtmJe4iXuQ0gA3sVf/GD0frbzBbbrwuXD83T5+9P+gK2OJQfVNsQgw7Eow1tqPeDXaUthv386ni56foj2GY4xvbrx4GcN7XzRy3+mbc3n00XHp1AHbHWAXmU6xuo0LU5RVedQ6vK+4TrAeMsCm7bx9tf+4TVbRtufl5cqXtr5gtzhgEpgIwkviBWxRKlGDwK5drz/IUJeBxjvQUFo2nNE87Q49HBNO1/oPPN6LMKKcva6eYYbG/CCLrQSMB33Rev+4PXjbBmtJnrA8GzlC70+YuBEw+nYbJuY4VDNqkhycR6treBdBRg6H8OWLdjuH/NX4r59x9/FmepL7/H5BOddqz7CvjGqsP97ojRYu+iBGk4saHqGG3GechXvjYChl+OleUGPT8d3KtJPF9HiTHU8Hk8A9vn6iV5qEX38VOJwqUJx6/l00XlxHBwvOt/ncJNRcRWwagIMEZ1fPl7ORLtfFAX94hmV0Fg+SPtFC+6n8DTifRtmVyo64PuefFQCTgiqDnil7wVBzmU64Judw1hbzFTdRdyKt2G1uN2C9VCsd0bfkLa4MJadrhiUVGIsIkytk1L0zBVTaqIp5zG/RUipBsorHLeAxHC7c6gCFrs64DR9YN6lkqziZH9t22wvkuIgY/NceIjwMjKF3FRTTkS4yaWm5kK6V5RAT2YdwebmwKwOWGbJ9RwMs67xRRvJsb+I2X2LsFXojZSuKFcmXxh8ijsW+NhHWfuJr8lyZCeV9MxsU76sI77yZudQB6x2C4B1VjmXXT/HF0rMXeOEwFFxSsPEnmpgpEIy31ckjxvAN81QjbBjmzaBh5Lverx1wGK3AFglt0rHw6L9QgS++ci0Sc+S42j8S/ZghXu9SlGMoDTHVwam+DDGOUl2VPBd73vrgMcyeY4vbEaxXMnXJIki8MF1YkplFiAwcSBmauU7MIuk92R83w6fwXe19dYBw6IqgHU6G4yhmZBq5TtkQAybpNGe7bUUR3m/Ox7Qk0t8kXdeNIoagR981+KtA4aZVACPcSvtV93FKvtVaDMaTdHf3+mIFDK+lj0yX+ZbpjlWURoGD/iujxzqu0omXFQDnNDjEAet4Yt+gQAh5Dkyj+DuclsXoXsb+KKiEDCC706yIyTcES9EWinE1hXAJkMZuKzwD3SlA3nWUfuRvWT5BTQLWwjBagNfkVUDNgG+O8cGBa93Dutl34rg4eoU0xlOtvPVs3zRSQN7unKTMPa4ROaxka+v8g3/KfDdCG9dVimLbCIHioF8R/8QcDoWVyMVrJJcBpS10j+YmG+4nC34rgjM7i/PQ4q09A+2wlfOzm9gf6XgWMOuQMeBzbr5zSTzG6JsQjmbWW+7NLP3zOHfwjRg4rX4LHvUlkn4FSzasgcspP4UzJ5ZNMZnshKfIVsDvr+JF3WOpOftyLEo+c4HpTq+b/LshgUcDehEck18LbOthNr4S+klvsP2eFEbbX8k00dRtFnAROf4DtnzsYxdMWFtYETEgAKk/ZH2PNT4QgapWJyL+aKLzRLfjX1vMfTLto3+GkYrrCnkfIHfhftIwhITmhLUJ76UopJNfMkxK8L6jkjKitrEC3zF1tYLMdvCdwIwSyEUA2/JF4CZpVCOmQ3NTIsW0JjHMpiFE6/zxannRgkJbxbxhcwSX7M9XqBJ3/mg4gdE7PRuni80SA5yYj58UgrBikXHiuJJd56vS2vsOUiCScGXmE39CJKNnQM0iqQ1WlD+NKiGXSklinyUVMrSLtYZmUMWBWg9Xw8hKMvZZnCsmtmLIqGz7Gp6y6y370DeV7Lj3VS2491IpYPoeDcQvXXr3VSkvgkr6ig2Eg126HS7urq6urq6urq6urq6urq6urq6uv5Z/Q9GI2DxoG9i8gAAAABJRU5ErkJggg==\";\nmsg.payload = Buffer.from(base64img, \"base64\");\nmsg.headers = {\n    \"Content-Type\": \"image/png\"\n}\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 330,
        "y": 3257,
        "wires": [
            [
                "8a062507d4a3d911"
            ]
        ]
    },
    {
        "id": "eedc089aae77ad01",
        "type": "http in",
        "z": "3d6c52b09293e59e",
        "name": "Login_GET",
        "url": "/lcm/login",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 170,
        "y": 160,
        "wires": [
            [
                "d74bd0371590101e"
            ]
        ]
    },
    {
        "id": "d74bd0371590101e",
        "type": "template",
        "z": "3d6c52b09293e59e",
        "name": "HTML",
        "field": "payload",
        "fieldType": "msg",
        "format": "html",
        "syntax": "mustache",
        "template": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Document</title>\n\n    <link rel=\"stylesheet\" href=\"https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.5.0/css/all.min.css\">\n    <link rel=\"stylesheet\" href=\"/lcm/normalize.css\">\n    <link rel=\"stylesheet\" href=\"/lcm/styles.css\">\n</head>\n<body>\n    <main class=\"contenedor\">\n        <form action=\"http://localhost:1880/lcm/login\" class=\"formulario\" method=\"POST\">\n            <fieldset>\n                <h2>Iniciar Sesión</h2>\n                <input name=\"username\" id=\"username\" type=\"text\" placeholder=\"Usuario\" required>\n                <input name=\"password\" id=\"password\" type=\"password\" placeholder=\"Contraseña\" required>\n                <button type=\"submit\">Entrar</button>\n            </fieldset>\n        </form>\n    </main>\n    \n\n    <script src=\"https://unpkg.com/mqtt/dist/mqtt.min.js\"></script>\n    <script type=\"module\" src=\"/lcm/login.js\"></script>\n</body>\n</html>",
        "x": 360,
        "y": 160,
        "wires": [
            [
                "258ce57db7820209"
            ]
        ]
    },
    {
        "id": "258ce57db7820209",
        "type": "change",
        "z": "3d6c52b09293e59e",
        "name": "Header HTML",
        "rules": [
            {
                "t": "set",
                "p": "headers.Content-Type",
                "pt": "msg",
                "to": "text/html",
                "tot": "str"
            }
        ],
        "x": 560,
        "y": 160,
        "wires": [
            [
                "41518e0212a66813"
            ]
        ]
    },
    {
        "id": "41518e0212a66813",
        "type": "http response",
        "z": "3d6c52b09293e59e",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 760,
        "y": 160,
        "wires": []
    },
    {
        "id": "a4a39a358148f562",
        "type": "debug",
        "z": "3d6c52b09293e59e",
        "name": "debug 31",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 760,
        "y": 340,
        "wires": []
    },
    {
        "id": "4cae0e31885353ad",
        "type": "function",
        "z": "3d6c52b09293e59e",
        "name": "Envio_token",
        "func": "//Obtenemos la libreria jsonwebtoken desde el contexto global\nconst jwt = global.get(\"jwt\");\n\nconst limite = 5; //Maxima cantidad de intentos\nconst ventana = 60 * 1000; //1 min\n\n\n\n\n\n\n\n//Se espera que msg.payload sea un objeto con username y password\nconst { username, password } = msg.payload;\n\n//Clave secreta y opciones\nconst SECRET = \"oapsa_clave_s3cr3t4_inpet\";\nconst OPTIONS = {\n    visualizador: { expiresIn: 300 },  // 5 minutos\n    admin: { expiresIn: 1800 }  // 30 minutos\n};\n\n//Función para crear token\nfunction createToken(user) {\n    return jwt.sign(\n        { user },         // payload\n        SECRET,           // secret\n        OPTIONS[user]     // opciones según rol\n    );\n}\n\n\n//autenticacion\nif (username === \"admin\" && password === \"OapsaLcm2025\") {\n    \n    //msg.payload = { token: createToken(\"admin\") };\n    msg.payload = {\"status\":\"ok\"};\n    \n    msg.cookies = {\n        atc_auth: {\n            value: createToken(\"admin\"),\n            path: \"/\",\n            httpOnly: true,\n            secure: false,\n            maxAge: OPTIONS.admin.expiresIn *1000\n        }\n    };\n    msg.statusCode = 200;\n\n} else {\n    msg.payload = { error: \"Credenciales inválidas\" };\n    msg.statusCode = 401;\n}\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 390,
        "y": 280,
        "wires": [
            [
                "a4a39a358148f562",
                "e790efa43f1928db"
            ]
        ]
    },
    {
        "id": "90e55cb1a8ef2f46",
        "type": "http in",
        "z": "3d6c52b09293e59e",
        "name": "Login_POST",
        "url": "/lcm/login",
        "method": "post",
        "upload": false,
        "swaggerDoc": "",
        "x": 170,
        "y": 280,
        "wires": [
            [
                "4cae0e31885353ad"
            ]
        ]
    },
    {
        "id": "e790efa43f1928db",
        "type": "http response",
        "z": "3d6c52b09293e59e",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 770,
        "y": 280,
        "wires": []
    },
    {
        "id": "88b05f8939ad469a",
        "type": "http response",
        "z": "3d6c52b09293e59e",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 790,
        "y": 2160,
        "wires": []
    },
    {
        "id": "6959c506727db623",
        "type": "switch",
        "z": "3d6c52b09293e59e",
        "name": "",
        "property": "statusCode",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "200",
                "vt": "str"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 610,
        "y": 2100,
        "wires": [
            [
                "25d3ec108f6622c9"
            ],
            [
                "88b05f8939ad469a"
            ]
        ]
    },
    {
        "id": "e080b8cdb1b44c9d",
        "type": "function",
        "z": "3d6c52b09293e59e",
        "name": "Validar_token",
        "func": "// Obtener jsonwebtoken del contexto global\nconst jwt = global.get(\"jwt\");\n// Guardar el mensaje inicial si lo usas más adelante\n//flow.set(\"responseObjectIniData_datos\", msg);\n\n// Secreto para firmar/verificar\nconst SECRET = \"oapsa_clave_s3cr3t4_inpet\";\n\n// Obtener header Authorization\n/*const authHeader = msg.req?.headers?.authorization;\nif (!authHeader || !authHeader.startsWith(\"Bearer \")) {\n    msg.statusCode = 401;\n    msg.payload = { error: \"Falta token o formato incorrecto\" };\n    return msg;\n}*/\n\n// Extraer el token\n//const token = authHeader.slice(7);\n\n\nconst token = msg.req?.cookies?.atc_auth;\nif (!token) {\n    msg.statusCode = 401;\n    msg.payload = { error: \"Sin token de sesión\" };\n    return msg;\n}\n\ntry {\n    // Verifica firma y expiración en un solo paso\n    const payload = jwt.verify(token, SECRET);\n\n    // Si llega aquí, es válido\n    msg.statusCode = 200;\n    msg.payload = {\n        mensaje: \"Token válido. Acceso permitido\",\n        data: payload\n    };\n} catch (err) {\n    // Error en verificación\n    msg.statusCode = 401;\n    if (err.name === \"TokenExpiredError\") {\n        msg.payload = { error: \"Token expirado\" };\n    } else {\n        msg.payload = { error: \"Token inválido\", detalle: err.message };\n    }\n}\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 420,
        "y": 2100,
        "wires": [
            [
                "6959c506727db623"
            ]
        ]
    },
    {
        "id": "0b23b34eacccc553",
        "type": "function",
        "z": "3d6c52b09293e59e",
        "name": "Validar Token",
        "func": "// Obtener jsonwebtoken del contexto global\nconst jwt = global.get(\"jwt\");\n\n// Guardar el mensaje inicial si lo usas más adelante\n//flow.set(\"responseObjectIniData_datos\", msg);\n\n// Secreto para firmar/verificar\nconst SECRET = \"oapsa_clave_s3cr3t4_inpet\";\n\n// Obtener header Authorization\n/*const authHeader = msg.req?.headers?.authorization;\nif (!authHeader || !authHeader.startsWith(\"Bearer \")) {\n    msg.statusCode = 401;\n    msg.payload = { error: \"Falta token o formato incorrecto\" };\n    return msg;\n}*/\n\n// Extraer el token\n//const token = authHeader.slice(7);\n\n\nconst token = msg.req?.cookies?.atc_auth;\nif (!token) {\n    msg.statusCode = 401;\n    msg.payload = { error: \"Sin token de sesión\" };\n    return msg;\n}\n\ntry {\n    // Verifica firma y expiración en un solo paso\n    const payload = jwt.verify(token, SECRET);\n\n    // Si llega aquí, es válido\n    msg.statusCode = 200;\n    msg.payload = {\n        mensaje: \"Token válido. Acceso permitido\",\n        data: payload\n    };\n} catch (err) {\n    // Error en verificación\n    msg.statusCode = 401;\n    if (err.name === \"TokenExpiredError\") {\n        msg.payload = { error: \"Token expirado\" };\n    } else {\n        msg.payload = { error: \"Token inválido\", detalle: err.message };\n    }\n}\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 300,
        "y": 2480,
        "wires": [
            [
                "886fe134488b73a2"
            ]
        ]
    },
    {
        "id": "886fe134488b73a2",
        "type": "switch",
        "z": "3d6c52b09293e59e",
        "name": "",
        "property": "statusCode",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "200",
                "vt": "str"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 490,
        "y": 2480,
        "wires": [
            [
                "2910bd1293652468"
            ],
            [
                "13fcbc9a312d0bfb"
            ]
        ]
    },
    {
        "id": "3e530ffbe15df7a0",
        "type": "http response",
        "z": "3d6c52b09293e59e",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 790,
        "y": 2580,
        "wires": []
    },
    {
        "id": "92a31fd482f15a5e",
        "type": "http in",
        "z": "3d6c52b09293e59e",
        "name": "LOGINJS",
        "url": "/lcm/login.js",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 160,
        "y": 220,
        "wires": [
            [
                "55bf0580a926ba22"
            ]
        ]
    },
    {
        "id": "55bf0580a926ba22",
        "type": "template",
        "z": "3d6c52b09293e59e",
        "name": "JS Code",
        "field": "payload",
        "fieldType": "msg",
        "format": "javascript",
        "syntax": "plain",
        "template": "//Script para inicio de sesion\nvar SERVER = \"localhost\";\ndocument.querySelector('.formulario').addEventListener('submit', function (e) {\n    e.preventDefault();\n    var username = document.getElementById('username').value;\n    var password = document.getElementById('password').value;\n    fetch(`http://${SERVER}:1880/lcm/login`, {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({ username: username, password: password })\n    })\n        .then(response => {\n            console.log(response);\n            return response.json();\n        })\n            .then(data => {\n                console.log(data);\n                if (data.status === 'ok') {\n                    //console.log(data);\n                    window.location.href = `http://${SERVER}:1880/lcm/index`;\n                } else {\n                    alert('Credenciales inválidas');\n                }\n            })\n        .catch(err => {\n            console.error(err);\n        });\n});",
        "x": 340,
        "y": 220,
        "wires": [
            [
                "e35e31303bf5e7e6"
            ]
        ]
    },
    {
        "id": "e35e31303bf5e7e6",
        "type": "change",
        "z": "3d6c52b09293e59e",
        "name": "Header JS",
        "rules": [
            {
                "t": "set",
                "p": "headers.Content-Type",
                "pt": "msg",
                "to": "application/javascript",
                "tot": "str"
            }
        ],
        "x": 540,
        "y": 220,
        "wires": [
            [
                "70cfee07c9fbcfbd"
            ]
        ]
    },
    {
        "id": "70cfee07c9fbcfbd",
        "type": "http response",
        "z": "3d6c52b09293e59e",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 740,
        "y": 220,
        "wires": []
    },
    {
        "id": "545532e11a3e7455",
        "type": "function",
        "z": "3d6c52b09293e59e",
        "name": "Limpieza_token",
        "func": "//msg.payload = {\"status\": \"ok\"};\nmsg.statusCode = 200;\nmsg.cookies = {\n    atc_auth: '',\n    httpOnly: true,\n    secure: false,\n    maxAge: 0,\n    path: '/'\n};\n\n//msg.payload = { mensaje: 'Sesión cerrada' };\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 380,
        "y": 360,
        "wires": [
            [
                "dfb2d80c0e3d9dd5"
            ]
        ]
    },
    {
        "id": "55ca663ae70e8d73",
        "type": "http in",
        "z": "3d6c52b09293e59e",
        "name": "Logout",
        "url": "/lcm/logout",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 150,
        "y": 360,
        "wires": [
            [
                "545532e11a3e7455"
            ]
        ]
    },
    {
        "id": "dfb2d80c0e3d9dd5",
        "type": "http response",
        "z": "3d6c52b09293e59e",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 590,
        "y": 360,
        "wires": []
    },
    {
        "id": "1c9bc851e0e716f0",
        "type": "function",
        "z": "3d6c52b09293e59e",
        "name": "Validar_Token",
        "func": "// Obtener jsonwebtoken del contexto global\nconst jwt = global.get(\"jwt\");\n\n// Guardar el mensaje inicial si lo usas más adelante\n//flow.set(\"responseObjectIniData_datos\", msg);\n\n// Secreto para firmar/verificar\nconst SECRET = \"oapsa_clave_s3cr3t4_inpet\";\n\n// Obtener header Authorization\n/*const authHeader = msg.req?.headers?.authorization;\nif (!authHeader || !authHeader.startsWith(\"Bearer \")) {\n    msg.statusCode = 401;\n    msg.payload = { error: \"Falta token o formato incorrecto\" };\n    return msg;\n}*/\n\n// Extraer el token\n//const token = authHeader.slice(7);\n\n\nconst token = msg.req?.cookies?.atc_auth;\nif (!token) {\n    msg.statusCode = 401;\n    msg.payload = { error: \"Sin token de sesión\" };\n    return msg;\n}\n\ntry {\n    // Verifica firma y expiración en un solo paso\n    const payload = jwt.verify(token, SECRET);\n\n    // Si llega aquí, es válido\n    msg.statusCode = 200;\n    msg.payload = {\n        mensaje: \"Token válido. Acceso permitido\",\n        data: payload\n    };\n} catch (err) {\n    // Error en verificación\n    msg.statusCode = 401;\n    if (err.name === \"TokenExpiredError\") {\n        msg.payload = { error: \"Token expirado\" };\n    } else {\n        msg.payload = { error: \"Token inválido\", detalle: err.message };\n    }\n}\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 280,
        "y": 2640,
        "wires": [
            [
                "06b0a74a33d2c0a0"
            ]
        ]
    },
    {
        "id": "06b0a74a33d2c0a0",
        "type": "switch",
        "z": "3d6c52b09293e59e",
        "name": "",
        "property": "statusCode",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "200",
                "vt": "str"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 450,
        "y": 2640,
        "wires": [
            [
                "02b5e8b94e44cb3a"
            ],
            [
                "24283940ee121c22"
            ]
        ]
    },
    {
        "id": "24283940ee121c22",
        "type": "http response",
        "z": "3d6c52b09293e59e",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 610,
        "y": 2700,
        "wires": []
    },
    {
        "id": "e39debc1ab6813e8",
        "type": "http response",
        "z": "3d6c52b09293e59e",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 630,
        "y": 2860,
        "wires": []
    },
    {
        "id": "d02dcf8c6da55eb6",
        "type": "function",
        "z": "3d6c52b09293e59e",
        "name": "Validar_Token",
        "func": "// Obtener jsonwebtoken del contexto global\nconst jwt = global.get(\"jwt\");\n\n// Guardar el mensaje inicial si lo usas más adelante\n//flow.set(\"responseObjectIniData_datos\", msg);\n\n// Secreto para firmar/verificar\nconst SECRET = \"oapsa_clave_s3cr3t4_inpet\";\n\n// Obtener header Authorization\n/*const authHeader = msg.req?.headers?.authorization;\nif (!authHeader || !authHeader.startsWith(\"Bearer \")) {\n    msg.statusCode = 401;\n    msg.payload = { error: \"Falta token o formato incorrecto\" };\n    return msg;\n}*/\n\n// Extraer el token\n//const token = authHeader.slice(7);\n\n\nconst token = msg.req?.cookies?.atc_auth;\nif (!token) {\n    msg.statusCode = 401;\n    msg.payload = { error: \"Sin token de sesión\" };\n    return msg;\n}\n\ntry {\n    // Verifica firma y expiración en un solo paso\n    const payload = jwt.verify(token, SECRET);\n\n    // Si llega aquí, es válido\n    msg.statusCode = 200;\n    msg.payload = {\n        mensaje: \"Token válido. Acceso permitido\",\n        data: payload\n    };\n} catch (err) {\n    // Error en verificación\n    msg.statusCode = 401;\n    if (err.name === \"TokenExpiredError\") {\n        msg.payload = { error: \"Token expirado\" };\n    } else {\n        msg.payload = { error: \"Token inválido\", detalle: err.message };\n    }\n}\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 280,
        "y": 2780,
        "wires": [
            [
                "7f4b47994f381f4d"
            ]
        ]
    },
    {
        "id": "7f4b47994f381f4d",
        "type": "switch",
        "z": "3d6c52b09293e59e",
        "name": "",
        "property": "statusCode",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "200",
                "vt": "str"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 450,
        "y": 2780,
        "wires": [
            [
                "1bd5879b78fbe4c1"
            ],
            [
                "e39debc1ab6813e8"
            ]
        ]
    },
    {
        "id": "13fcbc9a312d0bfb",
        "type": "template",
        "z": "3d6c52b09293e59e",
        "name": "HTML",
        "field": "payload",
        "fieldType": "msg",
        "format": "html",
        "syntax": "mustache",
        "template": "<!DOCTYPE html>\n<html lang=\"es\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>LCM</title>\n    <link rel=\"stylesheet\" href=\"/lcm/normalize.css\">\n    <link rel=\"stylesheet\" href=\"/lcm/styles.css\">\n    <style></style>\n</head>\n<body>\n    <script>\n        window.location.href = '/lcm/login';\n    </script>\n</body>\n</html>\n\n",
        "x": 670,
        "y": 2580,
        "wires": [
            [
                "3e530ffbe15df7a0"
            ]
        ]
    },
    {
        "id": "69422862be104eb4",
        "type": "function",
        "z": "3d6c52b09293e59e",
        "name": "Validar_token",
        "func": "// Obtener jsonwebtoken del contexto global\nconst jwt = global.get(\"jwt\");\n// Guardar el mensaje inicial si lo usas más adelante\n//flow.set(\"responseObjectIniData_datos\", msg);\n\n// Secreto para firmar/verificar\nconst SECRET = \"oapsa_clave_s3cr3t4_inpet\";\n\n// Obtener header Authorization\n/*const authHeader = msg.req?.headers?.authorization;\nif (!authHeader || !authHeader.startsWith(\"Bearer \")) {\n    msg.statusCode = 401;\n    msg.payload = { error: \"Falta token o formato incorrecto\" };\n    return msg;\n}*/\n\n// Extraer el token\n//const token = authHeader.slice(7);\n\n\nconst token = msg.req?.cookies?.atc_auth;\nif (!token) {\n    msg.statusCode = 401;\n    msg.payload = { error: \"Sin token de sesión\" };\n    return msg;\n}\n\ntry {\n    // Verifica firma y expiración en un solo paso\n    const payload = jwt.verify(token, SECRET);\n\n    // Si llega aquí, es válido\n    msg.statusCode = 200;\n    msg.payload = {\n        mensaje: \"Token válido. Acceso permitido\",\n        data: payload\n    };\n} catch (err) {\n    // Error en verificación\n    msg.statusCode = 401;\n    if (err.name === \"TokenExpiredError\") {\n        msg.payload = { error: \"Token expirado\" };\n    } else {\n        msg.payload = { error: \"Token inválido\", detalle: err.message };\n    }\n}\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 360,
        "y": 2200,
        "wires": [
            [
                "9ad3f08f67fda8aa"
            ]
        ]
    },
    {
        "id": "936bf25ddb38abdc",
        "type": "function",
        "z": "3d6c52b09293e59e",
        "name": "Validar_token",
        "func": "// Obtener jsonwebtoken del contexto global\nconst jwt = global.get(\"jwt\");\n// Guardar el mensaje inicial si lo usas más adelante\n//flow.set(\"responseObjectIniData_datos\", msg);\n\n// Secreto para firmar/verificar\nconst SECRET = \"oapsa_clave_s3cr3t4_inpet\";\n\n// Obtener header Authorization\n/*const authHeader = msg.req?.headers?.authorization;\nif (!authHeader || !authHeader.startsWith(\"Bearer \")) {\n    msg.statusCode = 401;\n    msg.payload = { error: \"Falta token o formato incorrecto\" };\n    return msg;\n}*/\n\n// Extraer el token\n//const token = authHeader.slice(7);\n\n\nconst token = msg.req?.cookies?.atc_auth;\nif (!token) {\n    msg.statusCode = 401;\n    msg.payload = { error: \"Sin token de sesión\" };\n    return msg;\n}\n\ntry {\n    // Verifica firma y expiración en un solo paso\n    const payload = jwt.verify(token, SECRET);\n\n    // Si llega aquí, es válido\n    msg.statusCode = 200;\n    msg.payload = {\n        mensaje: \"Token válido. Acceso permitido\",\n        data: payload\n    };\n} catch (err) {\n    // Error en verificación\n    msg.statusCode = 401;\n    if (err.name === \"TokenExpiredError\") {\n        msg.payload = { error: \"Token expirado\" };\n    } else {\n        msg.payload = { error: \"Token inválido\", detalle: err.message };\n    }\n}\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 380,
        "y": 2340,
        "wires": [
            [
                "fa3644fb6d07a465"
            ]
        ]
    },
    {
        "id": "f3085e634e0dfde1",
        "type": "mqtt in",
        "z": "3d6c52b09293e59e",
        "name": "",
        "topic": "lcm/PLC/Entrada_Falla_Motor2",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "6aebf5a95ad76cc9",
        "nl": false,
        "rap": false,
        "rh": 0,
        "inputs": 0,
        "x": 230,
        "y": 1800,
        "wires": [
            [
                "2582862b627bab39"
            ]
        ]
    },
    {
        "id": "1cd5821eb1390a01",
        "type": "comment",
        "z": "3d6c52b09293e59e",
        "name": "Login y generacion de token",
        "info": "",
        "x": 240,
        "y": 100,
        "wires": []
    },
    {
        "id": "98408725ef894fd8",
        "type": "comment",
        "z": "3d6c52b09293e59e",
        "name": "Lectura de topicos de MQTT",
        "info": "",
        "x": 220,
        "y": 600,
        "wires": []
    },
    {
        "id": "2ff5b336b0460728",
        "type": "comment",
        "z": "3d6c52b09293e59e",
        "name": "Servicio de datos del sistema de control",
        "info": "",
        "x": 210,
        "y": 2060,
        "wires": []
    },
    {
        "id": "af878d5b66292923",
        "type": "comment",
        "z": "3d6c52b09293e59e",
        "name": "Front",
        "info": "",
        "x": 70,
        "y": 2420,
        "wires": []
    },
    {
        "id": "410e3ccefffe1fcf",
        "type": "comment",
        "z": "3d6c52b09293e59e",
        "name": "Imagenes del front",
        "info": "",
        "x": 110,
        "y": 3060,
        "wires": []
    },
    {
        "id": "e2c7f940cc40f81d",
        "type": "comment",
        "z": "3d6c52b09293e59e",
        "name": "Envio de Mensajes de alarmas por telegram",
        "info": "",
        "x": 190,
        "y": 3340,
        "wires": []
    },
    {
        "id": "9ad3f08f67fda8aa",
        "type": "switch",
        "z": "3d6c52b09293e59e",
        "name": "",
        "property": "statusCode",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "200",
                "vt": "str"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 570,
        "y": 2200,
        "wires": [
            [
                "7898f6fa0eafef37"
            ],
            [
                "143400b1367b03bb"
            ]
        ]
    },
    {
        "id": "143400b1367b03bb",
        "type": "http response",
        "z": "3d6c52b09293e59e",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 790,
        "y": 2260,
        "wires": []
    },
    {
        "id": "fa3644fb6d07a465",
        "type": "switch",
        "z": "3d6c52b09293e59e",
        "name": "",
        "property": "statusCode",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "200",
                "vt": "str"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 590,
        "y": 2340,
        "wires": [
            [
                "47d55960b4106605"
            ],
            [
                "ca3e823334403c48"
            ]
        ]
    },
    {
        "id": "ca3e823334403c48",
        "type": "http response",
        "z": "3d6c52b09293e59e",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 790,
        "y": 2400,
        "wires": []
    },
    {
        "id": "8f1b10e53d24caea",
        "type": "function",
        "z": "3d6c52b09293e59e",
        "name": "Parada_de_Emergencia_Pulsada",
        "func": "// Obtén el valor de la variable global\nvar valor = global.get('Parada_de_Emergencia_Pulsada');\nlet user = global.get(\"lcmUserAllowed\");\n\n// Verificar si ya se envió el mensaje de advertencia\nvar alarmaEnviada = context.get('alarmaEnviada', 'filesystem') || false;\n//var alarmaEnviada = context.get('alarmaEnviada') || false;\nif (valor === true && !alarmaEnviada) {\n    // Enviar mensaje de alarma\n    msg.payload = {\n        \"chatId\": user,\n        \"type\": \"message\",\n        \"content\": global.get(\"controlador\")+\"🟥 ALARMA 🟥\\nParada de Emergencia Presionada!\",\n        \"registrar\":true\n    };\n\n    node.warn(\"Mensaje enviado con chatId: \" + msg.payload.chatId);\n\n    // Actualizar la variable de contexto para indicar que la alarma se ha enviado\n    context.set('alarmaEnviada', true, 'filesystem');\n    //context.set('alarmaEnviada', true);\n} else if (valor === false && alarmaEnviada) {\n    // Enviar mensaje de que la advertencia se ha apagado\n    msg.payload = {\n        \"chatId\": user,\n        \"type\": \"message\",\n        \"content\": global.get(\"controlador\")+\"🟩 INFO 🟩\\nParada de Emergencia Desactivada\",\n        \"registrar\":true\n    };\n\n    node.warn(\"Mensaje de información enviado con chatId: \" + msg.payload.chatId);\n\n    // Restablecer la variable de contexto ya que la advertencia se ha apagado\n    context.set('alarmaEnviada', false, 'filesystem');\n    //context.set('alarmaEnviada', false);\n}\n\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 360,
        "y": 3500,
        "wires": [
            [
                "1b63cffdf119b286"
            ]
        ]
    },
    {
        "id": "1b63cffdf119b286",
        "type": "switch",
        "z": "3d6c52b09293e59e",
        "name": "",
        "property": "payload.chatId",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "userAllowed",
                "vt": "global"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 590,
        "y": 3500,
        "wires": [
            [
                "18ca8a6b8f57219d",
                "8882e96044a65a62"
            ],
            []
        ]
    },
    {
        "id": "18ca8a6b8f57219d",
        "type": "function",
        "z": "3d6c52b09293e59e",
        "name": "",
        "func": "if(msg.payload.registrar === undefined){\n    msg.payload = 0;\n}\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 760,
        "y": 3440,
        "wires": [
            [
                "44d9089786fd9392"
            ]
        ]
    },
    {
        "id": "8882e96044a65a62",
        "type": "telegram sender",
        "z": "3d6c52b09293e59e",
        "name": "",
        "bot": "51eb8cd289f89a6d",
        "haserroroutput": false,
        "outputs": 1,
        "x": 810,
        "y": 3500,
        "wires": [
            []
        ]
    },
    {
        "id": "44d9089786fd9392",
        "type": "switch",
        "z": "3d6c52b09293e59e",
        "name": "",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "0",
                "vt": "num"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 1070,
        "y": 3440,
        "wires": [
            [],
            [
                "e866a11c15137fbe"
            ]
        ]
    },
    {
        "id": "e866a11c15137fbe",
        "type": "link out",
        "z": "3d6c52b09293e59e",
        "name": "REGISTRAR OUT",
        "links": [],
        "x": 1225,
        "y": 3440,
        "wires": []
    },
    {
        "id": "b9720eb04d0f6331",
        "type": "function",
        "z": "3d6c52b09293e59e",
        "name": "user allowed",
        "func": "const userAllowed = 8474875444;\nglobal.set(\"userAllowed\", userAllowed);\nglobal.set(\"lcmUserAllowed\", userAllowed);\nmsg.payload = \"ChatId registrado: \" + userAllowed;\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "// Code added here will be run once\n// whenever the node is deployed.\n//Elias chat: 5469189581\n//Grupo : -1003009517960\nglobal.set(\"userAllowed\", -1003009517960);\nglobal.set(\"controlador\", \"\");",
        "finalize": "",
        "libs": [],
        "x": 470,
        "y": 3380,
        "wires": [
            [
                "ccaef7df2eed029d"
            ]
        ]
    },
    {
        "id": "3d12fa06c4627b80",
        "type": "telegram sender",
        "z": "3d6c52b09293e59e",
        "name": "",
        "bot": "51eb8cd289f89a6d",
        "haserroroutput": false,
        "outputs": 1,
        "x": 770,
        "y": 3600,
        "wires": [
            []
        ]
    },
    {
        "id": "77ed95a592c7e076",
        "type": "switch",
        "z": "3d6c52b09293e59e",
        "name": "",
        "property": "payload.chatId",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "userAllowed",
                "vt": "global"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 510,
        "y": 3600,
        "wires": [
            [
                "f96bea3e31665e40",
                "3d12fa06c4627b80"
            ],
            []
        ]
    },
    {
        "id": "d90c42f10768d917",
        "type": "function",
        "z": "3d6c52b09293e59e",
        "name": "falla_bomba1",
        "func": "// Obtén el valor de la variable global\nvar valor = global.get('Entrada_Falla_Motor1');\nlet user = global.get(\"lcmUserAllowed\");\n// Verificar si ya se envió el mensaje de advertencia\nvar alarmaEnviada = context.get('alarmaEnviada', 'filesystem') || false;\n\nif (valor ===false && !alarmaEnviada) {\n    // Enviar mensaje de alarma\n    msg.payload = {\n        \"chatId\": user,\n        \"type\": \"message\",\n        \"content\": global.get(\"controlador\")+\"🟥 ALARMA 🟥\\nLa BOMBA 1 ha entrado en falla!\",\n        \"registrar\":true\n    };\n\n    node.warn(\"Mensaje enviado con chatId: \" + msg.payload.chatId);\n\n    // Actualizar la variable de contexto para indicar que la alarma se ha enviado\n    context.set('alarmaEnviada', true, 'filesystem');\n} else if (valor === true && alarmaEnviada) {\n    // Enviar mensaje de que la advertencia se ha apagado\n    msg.payload = {\n        \"chatId\": user,\n        \"type\": \"message\",\n        \"content\": global.get(\"controlador\")+\"🟩 INFO 🟩\\nLa BOMBA 1 ha salido de falla!\",\n        \"registrar\":true\n    };\n\n    node.warn(\"Mensaje de información enviado con chatId: \" + msg.payload.chatId);\n\n    // Restablecer la variable de contexto ya que la advertencia se ha apagado\n    context.set('alarmaEnviada', false, 'filesystem');\n}\n\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 340,
        "y": 3600,
        "wires": [
            [
                "77ed95a592c7e076"
            ]
        ]
    },
    {
        "id": "f96bea3e31665e40",
        "type": "function",
        "z": "3d6c52b09293e59e",
        "name": "",
        "func": "if(msg.payload.registrar === undefined){\n    msg.payload = 0;\n}\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 760,
        "y": 3540,
        "wires": [
            [
                "5f3f61a7f1034198"
            ]
        ]
    },
    {
        "id": "5f3f61a7f1034198",
        "type": "switch",
        "z": "3d6c52b09293e59e",
        "name": "",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "0",
                "vt": "num"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 1070,
        "y": 3540,
        "wires": [
            [],
            [
                "7183c8ebd399226f"
            ]
        ]
    },
    {
        "id": "7183c8ebd399226f",
        "type": "link out",
        "z": "3d6c52b09293e59e",
        "name": "REGISTRAR OUT",
        "links": [],
        "x": 1225,
        "y": 3560,
        "wires": []
    },
    {
        "id": "16d0dcce129367a1",
        "type": "function",
        "z": "3d6c52b09293e59e",
        "name": "falla_bomba2",
        "func": "// Obtén el valor de la variable global\nvar valor = global.get('Entrada_Falla_Motor2');\nlet user = global.get(\"lcmUserAllowed\");\n// Verificar si ya se envió el mensaje de advertencia\nvar alarmaEnviada = context.get('alarmaEnviada', 'filesystem') || false;\n\nif (valor ===false && !alarmaEnviada) {\n    // Enviar mensaje de alarma\n    msg.payload = {\n        \"chatId\": user,\n        \"type\": \"message\",\n        \"content\": global.get(\"controlador\")+\"🟥 ALARMA 🟥\\nLa BOMBA 2 ha entrado en falla!\",\n        \"registrar\":true\n    };\n\n    node.warn(\"Mensaje enviado con chatId: \" + msg.payload.chatId);\n\n    // Actualizar la variable de contexto para indicar que la alarma se ha enviado\n    context.set('alarmaEnviada', true, 'filesystem');\n} else if (valor === true && alarmaEnviada) {\n    // Enviar mensaje de que la advertencia se ha apagado\n    msg.payload = {\n        \"chatId\": user,\n        \"type\": \"message\",\n        \"content\": global.get(\"controlador\")+\"🟩 INFO 🟩\\nLa BOMBA 2 ha salido de falla!\",\n        \"registrar\":true\n    };\n\n    node.warn(\"Mensaje de información enviado con chatId: \" + msg.payload.chatId);\n\n    // Restablecer la variable de contexto ya que la advertencia se ha apagado\n    context.set('alarmaEnviada', false, 'filesystem');\n}\n\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 340,
        "y": 3680,
        "wires": [
            [
                "e1bc8b22bb0a3713"
            ]
        ]
    },
    {
        "id": "e1bc8b22bb0a3713",
        "type": "switch",
        "z": "3d6c52b09293e59e",
        "name": "",
        "property": "payload.chatId",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "userAllowed",
                "vt": "global"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 510,
        "y": 3680,
        "wires": [
            [
                "4951ea29524e260d",
                "7baab1e5b742253b"
            ],
            []
        ]
    },
    {
        "id": "4951ea29524e260d",
        "type": "function",
        "z": "3d6c52b09293e59e",
        "name": "",
        "func": "if(msg.payload.registrar === undefined){\n    msg.payload = 0;\n}\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 780,
        "y": 3640,
        "wires": [
            [
                "857f191a24d87e2c"
            ]
        ]
    },
    {
        "id": "7baab1e5b742253b",
        "type": "telegram sender",
        "z": "3d6c52b09293e59e",
        "name": "",
        "bot": "51eb8cd289f89a6d",
        "haserroroutput": false,
        "outputs": 1,
        "x": 790,
        "y": 3680,
        "wires": [
            []
        ]
    },
    {
        "id": "857f191a24d87e2c",
        "type": "switch",
        "z": "3d6c52b09293e59e",
        "name": "",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "0",
                "vt": "num"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 1030,
        "y": 3640,
        "wires": [
            [],
            [
                "064eca155df38855"
            ]
        ]
    },
    {
        "id": "064eca155df38855",
        "type": "link out",
        "z": "3d6c52b09293e59e",
        "name": "REGISTRAR OUT",
        "links": [],
        "x": 1225,
        "y": 3640,
        "wires": []
    },
    {
        "id": "458de8b164adfe0b",
        "type": "switch",
        "z": "3d6c52b09293e59e",
        "name": "",
        "property": "payload.chatId",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "userAllowed",
                "vt": "global"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 530,
        "y": 3760,
        "wires": [
            [
                "086a58a88bd765a4",
                "a92073ca4112e333"
            ],
            []
        ]
    },
    {
        "id": "52486621d36b82d8",
        "type": "function",
        "z": "3d6c52b09293e59e",
        "name": "refuerzo_mucho_tiempo",
        "func": "// Obtén el valor de la variable global\nvar valor = global.get('Alarma_refuerzo_mucho_tiempo');\nlet user = global.get(\"lcmUserAllowed\");\n// Verificar si ya se envió el mensaje de advertencia\nvar alarmaEnviada = context.get('alarmaEnviada', 'filesystem') || false;\n\n\nif (valor === true && !alarmaEnviada) {\n    // Enviar mensaje de alarma\n    msg.payload = {\n        \"chatId\": user,\n        \"type\": \"message\",\n        \"content\": global.get(\"controlador\")+\"🟨 ADVERTENCIA 🟨\\nLas BOMBAS 1 y 2 llevan mucho tiempo activas!\",\n        \"registrar\":true\n    };\n\n    node.warn(\"Mensaje enviado con chatId: \" + msg.payload.chatId);\n\n    // Actualizar la variable de contexto para indicar que la alarma se ha enviado\n    context.set('alarmaEnviada', true, 'filesystem');\n} else if (valor === false && alarmaEnviada) {\n    // Enviar mensaje de que la advertencia se ha apagado\n    msg.payload = {\n        \"chatId\": user,\n        \"type\": \"message\",\n        \"content\": global.get(\"controlador\")+\"🟩 INFO 🟩\\nLas BOMBAS 1 y 2 se han apagado tras un periodo prolongado de funcionamiento en Refuerzo!\",\n        \"registrar\":true\n    };\n\n    node.warn(\"Mensaje de información enviado con chatId: \" + msg.payload.chatId);\n\n    // Restablecer la variable de contexto ya que la advertencia se ha apagado\n    context.set('alarmaEnviada', false, 'filesystem');\n}\n\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 370,
        "y": 3760,
        "wires": [
            [
                "458de8b164adfe0b"
            ]
        ]
    },
    {
        "id": "086a58a88bd765a4",
        "type": "function",
        "z": "3d6c52b09293e59e",
        "name": "",
        "func": "if(msg.payload.registrar === undefined){\n    msg.payload = 0;\n}\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 660,
        "y": 3720,
        "wires": [
            [
                "37dadb3af1712709"
            ]
        ]
    },
    {
        "id": "a92073ca4112e333",
        "type": "telegram sender",
        "z": "3d6c52b09293e59e",
        "name": "",
        "bot": "51eb8cd289f89a6d",
        "haserroroutput": false,
        "outputs": 1,
        "x": 730,
        "y": 3760,
        "wires": [
            []
        ]
    },
    {
        "id": "37dadb3af1712709",
        "type": "switch",
        "z": "3d6c52b09293e59e",
        "name": "",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "0",
                "vt": "num"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 790,
        "y": 3720,
        "wires": [
            [],
            [
                "39efc291c768a98c"
            ]
        ]
    },
    {
        "id": "39efc291c768a98c",
        "type": "link out",
        "z": "3d6c52b09293e59e",
        "name": "REGISTRAR OUT",
        "links": [],
        "x": 915,
        "y": 3720,
        "wires": []
    },
    {
        "id": "efb64f1865422378",
        "type": "switch",
        "z": "3d6c52b09293e59e",
        "name": "",
        "property": "payload.chatId",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "userAllowed",
                "vt": "global"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 510,
        "y": 3840,
        "wires": [
            [
                "7e31e96deab31c4f",
                "3691653d8e8b50e9"
            ],
            []
        ]
    },
    {
        "id": "b93f484420d8df84",
        "type": "function",
        "z": "3d6c52b09293e59e",
        "name": "refuerzo_activado ",
        "func": "// Obtén el valor de la variable global\nvar valor = global.get('Alarma_Tiempo_Sin_Refuerzo_Excedido');\nlet user = global.get(\"lcmUserAllowed\");\n// Verificar si ya se envió el mensaje de advertencia\nvar alarmaEnviada = context.get('alarmaEnviada', 'filesystem') || false;\n\nif (valor === true && !alarmaEnviada) {\n    // Enviar mensaje de alarma\n    msg.payload = {\n        \"chatId\": user,\n        \"type\": \"message\",\n        \"content\": global.get(\"controlador\")+\"🟨 ADVERTENCIA 🟨\\nEl sistema ha entrado en refuerzo!\",\n        \"registrar\":true\n    };\n\n    node.warn(\"Mensaje enviado con chatId: \" + msg.payload.chatId);\n\n    // Actualizar la variable de contexto para indicar que la alarma se ha enviado\n    context.set('alarmaEnviada', true, 'filesystem');\n} else if (valor === false && alarmaEnviada) {\n    // Enviar mensaje de que la advertencia se ha apagado\n    msg.payload = {\n        \"chatId\": user,\n        \"type\": \"message\",\n        \"content\": global.get(\"controlador\")+\"🟩 INFO 🟩\\nSe ha reseteado el Aviso de refuerzo!\",\n        \"registrar\":true\n    };\n\n    node.warn(\"Mensaje de información enviado con chatId: \" + msg.payload.chatId);\n\n    // Restablecer la variable de contexto ya que la advertencia se ha apagado\n    context.set('alarmaEnviada', false, 'filesystem');\n}\n\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 350,
        "y": 3840,
        "wires": [
            [
                "efb64f1865422378"
            ]
        ]
    },
    {
        "id": "7e31e96deab31c4f",
        "type": "function",
        "z": "3d6c52b09293e59e",
        "name": "",
        "func": "if(msg.payload.registrar === undefined){\n    msg.payload = 0;\n}\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 660,
        "y": 3800,
        "wires": [
            [
                "545417666ab577ec"
            ]
        ]
    },
    {
        "id": "3691653d8e8b50e9",
        "type": "telegram sender",
        "z": "3d6c52b09293e59e",
        "name": "",
        "bot": "51eb8cd289f89a6d",
        "haserroroutput": false,
        "outputs": 1,
        "x": 690,
        "y": 3840,
        "wires": [
            []
        ]
    },
    {
        "id": "545417666ab577ec",
        "type": "switch",
        "z": "3d6c52b09293e59e",
        "name": "",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "0",
                "vt": "num"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 790,
        "y": 3800,
        "wires": [
            [],
            [
                "528ccffee2f6978e"
            ]
        ]
    },
    {
        "id": "528ccffee2f6978e",
        "type": "link out",
        "z": "3d6c52b09293e59e",
        "name": "REGISTRAR OUT",
        "links": [],
        "x": 915,
        "y": 3800,
        "wires": []
    },
    {
        "id": "8c015c45aa574ae0",
        "type": "function",
        "z": "3d6c52b09293e59e",
        "name": "Mant_Prev_1",
        "func": "// Obtén el valor de la variable global\nvar valor = global.get('Alarma_Manten_Prev_B1');\nlet user = global.get(\"lcmUserAllowed\");\n// Verificar si ya se envió el mensaje de advertencia\nvar alarmaEnviada = context.get('alarmaEnviada', 'filesystem') || false;\n\nif (valor === true && !alarmaEnviada) {\n    // Enviar mensaje de alarma\n    msg.payload = {\n        \"chatId\": user,\n        \"type\": \"message\",\n        \"content\": global.get(\"controlador\")+\"🟨 AVISO 🟨\\nLa BOMBA 1 necesita mantenimiento PREVENTIVO!\",\n        \"registrar\":true\n    };\n\n    node.warn(\"Mensaje enviado con chatId: \" + msg.payload.chatId);\n\n    // Actualizar la variable de contexto para indicar que la alarma se ha enviado\n    context.set('alarmaEnviada', true, 'filesystem');\n} else if (valor === false && alarmaEnviada) {\n    // Enviar mensaje de que la advertencia se ha apagado\n    msg.payload = {\n        \"chatId\": user,\n        \"type\": \"message\",\n        \"content\": global.get(\"controlador\")+\"🟩 INFO 🟩\\nEl mantenimiento PREVENTIVO de la BOMBA 1 ha sido realizado!\",\n        \"registrar\":true\n    };\n\n    node.warn(\"Mensaje de información enviado con chatId: \" + msg.payload.chatId);\n\n    // Restablecer la variable de contexto ya que la advertencia se ha apagado\n    context.set('alarmaEnviada', false, 'filesystem');\n}\n\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 330,
        "y": 3920,
        "wires": [
            [
                "ee5cd918d54b5a99"
            ]
        ]
    },
    {
        "id": "ee5cd918d54b5a99",
        "type": "switch",
        "z": "3d6c52b09293e59e",
        "name": "",
        "property": "payload.chatId",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "userAllowed",
                "vt": "global"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 510,
        "y": 3920,
        "wires": [
            [
                "4054d5eaf8751797",
                "8547957dda4bd2a5"
            ],
            []
        ]
    },
    {
        "id": "4054d5eaf8751797",
        "type": "function",
        "z": "3d6c52b09293e59e",
        "name": "",
        "func": "if(msg.payload.registrar === undefined){\n    msg.payload = 0;\n}\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 660,
        "y": 3880,
        "wires": [
            [
                "67b24470c8131e26"
            ]
        ]
    },
    {
        "id": "8547957dda4bd2a5",
        "type": "telegram sender",
        "z": "3d6c52b09293e59e",
        "name": "",
        "bot": "51eb8cd289f89a6d",
        "haserroroutput": false,
        "outputs": 1,
        "x": 690,
        "y": 3920,
        "wires": [
            []
        ]
    },
    {
        "id": "67b24470c8131e26",
        "type": "switch",
        "z": "3d6c52b09293e59e",
        "name": "",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "0",
                "vt": "num"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 790,
        "y": 3880,
        "wires": [
            [],
            [
                "5a72a0fad7175185"
            ]
        ]
    },
    {
        "id": "5a72a0fad7175185",
        "type": "link out",
        "z": "3d6c52b09293e59e",
        "name": "REGISTRAR OUT",
        "links": [],
        "x": 915,
        "y": 3880,
        "wires": []
    },
    {
        "id": "b55980cfbe16bd74",
        "type": "inject",
        "z": "3d6c52b09293e59e",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "1",
        "crontab": "",
        "once": true,
        "onceDelay": "1",
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 150,
        "y": 3720,
        "wires": [
            [
                "d90c42f10768d917",
                "16d0dcce129367a1",
                "52486621d36b82d8",
                "b93f484420d8df84",
                "8c015c45aa574ae0",
                "8b4a4b561591164b",
                "93e0176869d65342",
                "26b9bdfc07d4e229",
                "8f1b10e53d24caea"
            ]
        ]
    },
    {
        "id": "81d5b6c0d8e71bc2",
        "type": "telegram receiver",
        "z": "3d6c52b09293e59e",
        "name": "",
        "bot": "51eb8cd289f89a6d",
        "saveDataDir": "",
        "filterCommands": false,
        "x": 290,
        "y": 3440,
        "wires": [
            [
                "6437ef549a519a33"
            ],
            []
        ]
    },
    {
        "id": "6437ef549a519a33",
        "type": "debug",
        "z": "3d6c52b09293e59e",
        "name": "debug 3",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 580,
        "y": 3440,
        "wires": []
    },
    {
        "id": "8b4a4b561591164b",
        "type": "function",
        "z": "3d6c52b09293e59e",
        "name": "Mant_Prev_2",
        "func": "// Obtén el valor de la variable global\nvar valor = global.get('Alarma_Manten_Prev_B2');\nlet user = global.get(\"lcmUserAllowed\");\n// Verificar si ya se envió el mensaje de advertencia\nvar alarmaEnviada = context.get('alarmaEnviada', 'filesystem') || false;\n\nif (valor === true && !alarmaEnviada) {\n    // Enviar mensaje de alarma\n    msg.payload = {\n        \"chatId\": user,\n        \"type\": \"message\",\n        \"content\": global.get(\"controlador\")+\"🟨 AVISO 🟨\\nLa BOMBA 2 necesia Mantenimiento PREVENTIVO!\",\n        \"registrar\":true\n    };\n\n    node.warn(\"Mensaje enviado con chatId: \" + msg.payload.chatId);\n\n    // Actualizar la variable de contexto para indicar que la alarma se ha enviado\n    context.set('alarmaEnviada', true, 'filesystem');\n} else if (valor ===false && alarmaEnviada) {\n    // Enviar mensaje de que la advertencia se ha apagado\n    msg.payload = {\n        \"chatId\": user,\n        \"type\": \"message\",\n        \"content\": global.get(\"controlador\")+\"🟩 INFO 🟩\\nEl mantenimiento PREVENTIVO de la BOMBA 2 ha sido realizado!\",\n        \"registrar\":true\n    };\n\n    node.warn(\"Mensaje de información enviado con chatId: \" + msg.payload.chatId);\n\n    // Restablecer la variable de contexto ya que la advertencia se ha apagado\n    context.set('alarmaEnviada', false, 'filesystem');\n}\n\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 310,
        "y": 4000,
        "wires": [
            [
                "63b663a5171afbd2"
            ]
        ]
    },
    {
        "id": "93e0176869d65342",
        "type": "function",
        "z": "3d6c52b09293e59e",
        "name": "Mant_Correctivo_1",
        "func": "// Obtén el valor de la variable global\nvar valor = global.get('Alarma_Manten_Correct_B1');\nlet user = global.get(\"lcmUserAllowed\");\n// Verificar si ya se envió el mensaje de advertencia\nvar alarmaEnviada = context.get('alarmaEnviada', 'filesystem') || false;\n\nif (valor === true && !alarmaEnviada) {\n    // Enviar mensaje de alarma\n    msg.payload = {\n        \"chatId\": user,\n        \"type\": \"message\",\n        \"content\": global.get(\"controlador\")+\"🟧 AVISO 🟧\\nLa BOMBA 1 necesita mantenimiento CORRECTIVO!\",\n        \"registrar\":true\n    };\n\n    node.warn(\"Mensaje enviado con chatId: \" + msg.payload.chatId);\n\n    // Actualizar la variable de contexto para indicar que la alarma se ha enviado\n    context.set('alarmaEnviada', true, 'filesystem');\n} else if (valor === false && alarmaEnviada) {\n    // Enviar mensaje de que la advertencia se ha apagado\n    msg.payload = {\n        \"chatId\": user,\n        \"type\": \"message\",\n        \"content\": global.get(\"controlador\")+\"🟩 INFO 🟩\\nEl mantenimiento CORRECTIVO de la BOMBA 1 ha sido realizado!\",\n        \"registrar\":true\n    };\n\n    node.warn(\"Mensaje de información enviado con chatId: \" + msg.payload.chatId);\n\n    // Restablecer la variable de contexto ya que la advertencia se ha apagado\n    context.set('alarmaEnviada', false, 'filesystem');\n}\n\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 330,
        "y": 4080,
        "wires": [
            [
                "926c4e8023542306"
            ]
        ]
    },
    {
        "id": "63b663a5171afbd2",
        "type": "switch",
        "z": "3d6c52b09293e59e",
        "name": "",
        "property": "payload.chatId",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "userAllowed",
                "vt": "global"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 510,
        "y": 4000,
        "wires": [
            [
                "45188e89244caa6a",
                "2c4f439b2b8ce132"
            ],
            []
        ]
    },
    {
        "id": "45188e89244caa6a",
        "type": "function",
        "z": "3d6c52b09293e59e",
        "name": "",
        "func": "if(msg.payload.registrar === undefined){\n    msg.payload = 0;\n}\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 660,
        "y": 3960,
        "wires": [
            [
                "325d7e21c9b6f00e"
            ]
        ]
    },
    {
        "id": "2c4f439b2b8ce132",
        "type": "telegram sender",
        "z": "3d6c52b09293e59e",
        "name": "",
        "bot": "51eb8cd289f89a6d",
        "haserroroutput": false,
        "outputs": 1,
        "x": 690,
        "y": 4000,
        "wires": [
            []
        ]
    },
    {
        "id": "325d7e21c9b6f00e",
        "type": "switch",
        "z": "3d6c52b09293e59e",
        "name": "",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "0",
                "vt": "num"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 790,
        "y": 3960,
        "wires": [
            [],
            [
                "76e5da5c661d2aca"
            ]
        ]
    },
    {
        "id": "926c4e8023542306",
        "type": "switch",
        "z": "3d6c52b09293e59e",
        "name": "",
        "property": "payload.chatId",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "userAllowed",
                "vt": "global"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 510,
        "y": 4080,
        "wires": [
            [
                "6599d4a78f2c46b7",
                "3dd8ea944264e16c"
            ],
            []
        ]
    },
    {
        "id": "6599d4a78f2c46b7",
        "type": "function",
        "z": "3d6c52b09293e59e",
        "name": "",
        "func": "if(msg.payload.registrar === undefined){\n    msg.payload = 0;\n}\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 660,
        "y": 4040,
        "wires": [
            [
                "37483dec51d88b3c"
            ]
        ]
    },
    {
        "id": "3dd8ea944264e16c",
        "type": "telegram sender",
        "z": "3d6c52b09293e59e",
        "name": "",
        "bot": "51eb8cd289f89a6d",
        "haserroroutput": false,
        "outputs": 1,
        "x": 690,
        "y": 4080,
        "wires": [
            []
        ]
    },
    {
        "id": "37483dec51d88b3c",
        "type": "switch",
        "z": "3d6c52b09293e59e",
        "name": "",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "0",
                "vt": "num"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 790,
        "y": 4040,
        "wires": [
            [],
            [
                "87eb3b85174177cf"
            ]
        ]
    },
    {
        "id": "76e5da5c661d2aca",
        "type": "link out",
        "z": "3d6c52b09293e59e",
        "name": "REGISTRAR OUT",
        "links": [],
        "x": 915,
        "y": 3960,
        "wires": []
    },
    {
        "id": "87eb3b85174177cf",
        "type": "link out",
        "z": "3d6c52b09293e59e",
        "name": "REGISTRAR OUT",
        "links": [],
        "x": 915,
        "y": 4040,
        "wires": []
    },
    {
        "id": "1ab81414087558fb",
        "type": "inject",
        "z": "3d6c52b09293e59e",
        "name": "Prueba",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": "1",
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 130,
        "y": 4240,
        "wires": [
            [
                "e79807e178f71ce4"
            ]
        ]
    },
    {
        "id": "e79807e178f71ce4",
        "type": "function",
        "z": "3d6c52b09293e59e",
        "name": "funcion de Prueba",
        "func": "const user = global.get(\"lcmUserAllowed\");\nmsg.payload = {\n    \"chatId\": user,\n   \"type\": \"message\",\n   \"content\": \"Hola desde Node-RED 🚀\"\n};\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 370,
        "y": 4240,
        "wires": [
            [
                "ff922f83bbd07739"
            ]
        ]
    },
    {
        "id": "ff922f83bbd07739",
        "type": "telegram sender",
        "z": "3d6c52b09293e59e",
        "name": "",
        "bot": "51eb8cd289f89a6d",
        "haserroroutput": true,
        "outputs": 2,
        "x": 650,
        "y": 4240,
        "wires": [
            [],
            []
        ]
    },
    {
        "id": "ccaef7df2eed029d",
        "type": "debug",
        "z": "3d6c52b09293e59e",
        "name": "debug 32",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 660,
        "y": 3380,
        "wires": []
    },
    {
        "id": "7f669c36e41cf1d1",
        "type": "inject",
        "z": "3d6c52b09293e59e",
        "name": "Set ChatId",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": "0.1",
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 310,
        "y": 3380,
        "wires": [
            [
                "b9720eb04d0f6331"
            ]
        ]
    },
    {
        "id": "26b9bdfc07d4e229",
        "type": "function",
        "z": "3d6c52b09293e59e",
        "name": "Mant_Correctivo_2",
        "func": "// Obtén el valor de la variable global\nvar valor = global.get('Alarma_Manten_Correct_B2');\nlet user = global.get(\"lcmUserAllowed\");\n// Verificar si ya se envió el mensaje de advertencia\nvar alarmaEnviada = context.get('alarmaEnviada', 'filesystem') || false;\n\nif (valor === true && !alarmaEnviada) {\n    // Enviar mensaje de alarma\n    msg.payload = {\n        \"chatId\": user,\n        \"type\": \"message\",\n        \"content\": global.get(\"controlador\")+\"🟧 AVISO 🟧\\nLa BOMBA 2 necesita mantenimiento CORRECTIVO!\",\n        \"registrar\":true\n    };\n\n    node.warn(\"Mensaje enviado con chatId: \" + msg.payload.chatId);\n\n    // Actualizar la variable de contexto para indicar que la alarma se ha enviado\n    context.set('alarmaEnviada', true, 'filesystem');\n} else if (valor === false && alarmaEnviada) {\n    // Enviar mensaje de que la advertencia se ha apagado\n    msg.payload = {\n        \"chatId\": user,\n        \"type\": \"message\",\n        \"content\": global.get(\"controlador\")+\"🟩 INFO 🟩\\nEl mantenimiento CORRECTIVO de la BOMBA 2 ha sido realizado!\",\n        \"registrar\":true\n    };\n\n    node.warn(\"Mensaje de información enviado con chatId: \" + msg.payload.chatId);\n\n    // Restablecer la variable de contexto ya que la advertencia se ha apagado\n    context.set('alarmaEnviada', false, 'filesystem');\n}\n\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 350,
        "y": 4160,
        "wires": [
            [
                "73cd0f8d509a9dd2"
            ]
        ]
    },
    {
        "id": "73cd0f8d509a9dd2",
        "type": "switch",
        "z": "3d6c52b09293e59e",
        "name": "",
        "property": "payload.chatId",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "userAllowed",
                "vt": "global"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 530,
        "y": 4160,
        "wires": [
            [
                "68a7a258d9838514",
                "85a9c6c5d078f9c5"
            ],
            []
        ]
    },
    {
        "id": "68a7a258d9838514",
        "type": "function",
        "z": "3d6c52b09293e59e",
        "name": "",
        "func": "if(msg.payload.registrar === undefined){\n    msg.payload = 0;\n}\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 680,
        "y": 4120,
        "wires": [
            [
                "d608fd4fdb5f741d"
            ]
        ]
    },
    {
        "id": "85a9c6c5d078f9c5",
        "type": "telegram sender",
        "z": "3d6c52b09293e59e",
        "name": "",
        "bot": "51eb8cd289f89a6d",
        "haserroroutput": false,
        "outputs": 1,
        "x": 710,
        "y": 4160,
        "wires": [
            []
        ]
    },
    {
        "id": "d608fd4fdb5f741d",
        "type": "switch",
        "z": "3d6c52b09293e59e",
        "name": "",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "0",
                "vt": "num"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 810,
        "y": 4120,
        "wires": [
            [],
            [
                "c748a727c19b9a86"
            ]
        ]
    },
    {
        "id": "c748a727c19b9a86",
        "type": "link out",
        "z": "3d6c52b09293e59e",
        "name": "REGISTRAR OUT",
        "links": [],
        "x": 935,
        "y": 4120,
        "wires": []
    },
    {
        "id": "6aebf5a95ad76cc9",
        "type": "mqtt-broker",
        "name": "",
        "broker": "3.130.224.82",
        "port": 1883,
        "clientid": "Lcm_nodered ",
        "autoConnect": true,
        "usetls": false,
        "protocolVersion": "5",
        "keepalive": 60,
        "cleansession": true,
        "autoUnsubscribe": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthRetain": "false",
        "birthPayload": "",
        "birthMsg": {},
        "closeTopic": "",
        "closeQos": "0",
        "closeRetain": "false",
        "closePayload": "",
        "closeMsg": {},
        "willTopic": "",
        "willQos": "0",
        "willRetain": "false",
        "willPayload": "",
        "willMsg": {},
        "userProps": "",
        "sessionExpiry": ""
    },
    {
        "id": "51eb8cd289f89a6d",
        "type": "telegram bot",
        "botname": "lcm_bot",
        "usernames": "",
        "chatids": "",
        "baseapiurl": "",
        "testenvironment": false,
        "updatemode": "polling",
        "addressfamily": "",
        "pollinterval": 300,
        "usesocks": false,
        "sockshost": "",
        "socksprotocol": "socks5",
        "socksport": 6667,
        "socksusername": "anonymous",
        "sockspassword": "",
        "bothost": "",
        "botpath": "",
        "localbotport": 8443,
        "publicbotport": 8443,
        "privatekey": "",
        "certificate": "",
        "useselfsignedcertificate": false,
        "sslterminated": false,
        "verboselogging": false
    }
]